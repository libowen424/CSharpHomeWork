<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="这张图片有点劝退了，哈哈哈~ 通过原型机制，JavaScript 中的对象从其他对象继承功能特性；这种继承机制与经典的面向对象编程语言的继承机制不同。本文将探讨这些差别，解释原型链如何工作，并了解如何" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>深度剖析前端JavaScript中的原型(JS的对象原型) - TZ张无忌 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/zhaohongcheng/custom.css?v=t5o5q9lwgJ78BN8ae&#x2B;QJ924r9v0=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/zhaohongcheng/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/zhaohongcheng/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/zhaohongcheng/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 511456;
        var currentBlogApp = 'zhaohongcheng';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/zhaohongcheng/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/zhaohongcheng/">Tz张无忌</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/zhaohongcheng/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/TZ%E5%BC%A0%E6%97%A0%E5%BF%8C">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/zhaohongcheng/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
33&nbsp; </span>
<span id="stats_article_count">文章 - 
4&nbsp; </span>
<span id="stats-comment_count">评论 - 
85</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/zhaohongcheng/p/12766000.html">深度剖析前端JavaScript中的原型(JS的对象原型)</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <div>　　　　　&nbsp;<img src="https://img2020.cnblogs.com/blog/1669498/202004/1669498-20200424110458172-722472915.jpg" alt="" width="751" height="406"></div>
<div>&nbsp;</div>
<div>&nbsp;</div>
<div>　　　　　　　　　　　　　　这张图片有点劝退了，哈哈哈~&nbsp;<img src="https://img2020.cnblogs.com/blog/1669498/202004/1669498-20200424111149933-359718526.png" alt="">
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
<div>&nbsp;</div>
<div>&nbsp;
<h2><strong>通过原型机制，JavaScript 中的对象从其他对象继承功能特性；这种继承机制与经典的面向对象编程语言的继承机制不同。本文将探讨这些差别，解释原型链如何工作，并了解如何通过 <code>prototype</code> 属性向已有的构造器添加方法</strong></h2>
<p>&nbsp;</p>
<div>
<p>&nbsp;&nbsp;</p>
</div>
<hr />
<p>&nbsp;</p>
<h1 data-id="heading-0">基于原型的语言？</h1>
<p>&nbsp;</p>
<p>&nbsp; &nbsp; &nbsp; JavaScript 常被描述为一种<strong>基于原型的语言 (prototype-based language)</strong>&mdash;&mdash;每个对象拥有一个<strong>原型对象</strong>，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为<strong>原型链 (prototype chain)</strong>，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。</p>
<p>&nbsp;</p>
<p>准确地说，这些属性和方法定义在Object的构造器函数(<strong>constructor functions</strong>)之上的<strong><code>prototype</code></strong>属性上，而非对象实例本身。</p>
<p>&nbsp;</p>
<p>在传统的 OOP 中，首先定义&ldquo;类&rdquo;，此后创建对象实例时，类中定义的所有属性和方法都被复制到实例中。在 JavaScript 中并不如此复制&mdash;&mdash;而是在对象实例和它的构造器之间建立一个链接（它是<strong>__proto__</strong>属性，是从构造函数的<strong><code>prototype</code></strong>属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法。</p>
<p>&nbsp;</p>
<p><strong>注意: 理解对象的原型（可以通过<code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf" rel="nofollow noopener noreferrer" target="_blank">Object.getPrototypeOf(obj)</a></code>或者已被弃用的<code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto" rel="nofollow noopener noreferrer" target="_blank">__proto__</a></code>属性获得）与构造函数的<code>prototype</code>属性之间的区别是很重要的。前者是每个实例上都有的属性，后者是构造函数的属性。也就是说，<code>Object.getPrototypeOf(new Foobar())</code>和<code>Foobar.prototype</code>指向着同一个对象。</strong></p>
<p>&nbsp;</p>
<p><strong>以上描述很抽象；我们先看一个例子。</strong></p>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<p>&nbsp; &nbsp; &nbsp; 在javascript中，函数可以有属性。 每个函数都有一个特殊的属性叫作<code>原型（<strong>prototype</strong>）</code> ，正如下面所展示的。请注意，下面的代码是独立的一段(在网页中没有其他代码的情况下，这段代码是安全的)。为了最好的学习体验，你最好打开一个控制台 (在Chrome和Firefox中，可以按Ctrl+Shift+I来打开)切换到"控制台" 选项卡, 复制粘贴下面的JavaScript代码，然后按回车来运行</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　function</span><span style="color: #000000;"> doSomething(){}
　　　　console.log( doSomething.prototype );
　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;"> It does not matter how you declare the function, a</span><span style="color: #008000;">
　　　　//</span><span style="color: #008000;">  function in javascript will always have a default</span><span style="color: #008000;">
　　　　//</span><span style="color: #008000;">  prototype property.</span>
　　　　<span style="color: #0000ff;">var</span> doSomething = <span style="color: #0000ff;">function</span><span style="color: #000000;">(){}; 
　　　　console.log( doSomething.prototype );</span></pre>
</div>
<p>&nbsp;</p>
<p>正如上面所看到的, <code>doSomething</code> 函数有一个默认的原型属性，它在控制台上面呈现了出来. 运行这段代码之后，控制台上面应该出现了像这样的一个对象.</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">　　　　{
    　　　　constructor: &fnof; doSomething(),
    　　　　__proto__: {
        　　　　constructor: &fnof; Object(),
       　　　　 hasOwnProperty: &fnof; hasOwnProperty(),
        　　　　isPrototypeOf: &fnof; isPrototypeOf(),
        　　　　propertyIsEnumerable: &fnof; propertyIsEnumerable(),
        　　　　toLocaleString: &fnof; toLocaleString(),
       　　　　 toString: &fnof; toString(),
     　　　　   valueOf: &fnof; valueOf()
　　　　    }
　　　　}</span></pre>
</div>
<p>&nbsp;</p>
<p>现在，我们可以添加一些属性到 doSomething 的原型上面，如下所示.</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　function</span><span style="color: #000000;"> doSomething(){}
　　　　doSomething.prototype.foo </span>= "bar"<span style="color: #000000;">;
　　　　console.log( doSomething.prototype );</span></pre>
</div>
<p>&nbsp;</p>
<p><strong>结果:</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">　　　　{
  　　　　  foo: </span>"bar"<span style="color: #000000;">,
 　　　　   constructor: &fnof; doSomething(),
  　　　　  __proto__: {
  　　　　      constructor: &fnof; Object(),
 　　　　       hasOwnProperty: &fnof; hasOwnProperty(),
  　　　　      isPrototypeOf: &fnof; isPrototypeOf(),
  　　　　      propertyIsEnumerable: &fnof; propertyIsEnumerable(),
  　　　　      toLocaleString: &fnof; toLocaleString(),
 　　　　       toString: &fnof; toString(),
 　　　　       valueOf: &fnof; valueOf()
 　　　　   }
　　　　}</span></pre>
</div>
<p>&nbsp;然后，我们可以使用 new 运算符来在现在的这个原型基础之上，创建一个 <code>doSomething</code> 的实例。正确使用 new 运算符的方法就是在正常调用函数时，在函数名的前面加上一个<strong> <code>new</code> </strong>前缀. 通过这种方法，在调用函数前加一个<strong> <code>new</code> </strong>，它就会返回一个这个函数的实例化对象. 然后，就可以在这个对象上面添加一些属性：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　function</span><span style="color: #000000;"> doSomething(){}
　　　　doSomething.prototype.foo </span>= "bar"; <span style="color: #008000;">//</span><span style="color: #008000;"> add a property onto the prototype</span>
　　　　<span style="color: #0000ff;">var</span> doSomeInstancing = <span style="color: #0000ff;">new</span><span style="color: #000000;"> doSomething();
　　　　doSomeInstancing.prop </span>= "some value"; <span style="color: #008000;">//</span><span style="color: #008000;"> add a property onto the object</span>
　　　　console.log( doSomeInstancing );</pre>
</div>
<p>&nbsp;</p>
<p><strong>结果:</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">　　　　{
  　　　　  prop: </span>"some value"<span style="color: #000000;">,
  　　　　  __proto__: {
 　　　　       foo: </span>"bar"<span style="color: #000000;">,
  　　　　      constructor: &fnof; doSomething(),
   　　　　     __proto__: {
 　　　　           constructor: &fnof; Object(),
　　　　            hasOwnProperty: &fnof; hasOwnProperty(),
　　　　            isPrototypeOf: &fnof; isPrototypeOf(),
       　　　　     propertyIsEnumerable: &fnof; propertyIsEnumerable(),
          　　　　  toLocaleString: &fnof; toLocaleString(),
            　　　　toString: &fnof; toString(),
           　　　　 valueOf: &fnof; valueOf()
   　　　　     }
  　　　　  }
　　　　}</span></pre>
</div>
<p>&nbsp;就像上面看到的<code>doSomeInstancing</code> 的<strong> <code>__proto__</code></strong> 属性就是<strong><code>doSomething.prototype</code>.</strong> 但是这又有什么用呢?&nbsp;</p>
<p>&nbsp;</p>
<p>好吧,当你访问 <strong><code>doSomeInstancing</code> </strong>的一个属性, 浏览器首先查找 <code>doSomeInstancing</code> 是否有这个属性. 如果 <code>doSomeInstancing</code> 没有这个属性, 然后浏览器就会在 <code>doSomeInstancing</code> 的<strong> <code>__proto__</code> </strong>中查找这个属性(也就是 doSomething.prototype). 如果 doSomeInstancing 的 <strong><code>__proto__</code> </strong>有这个属性, 那么 doSomeInstancing 的 <strong><code>__proto__</code> </strong>上的这个属性就会被使用. 否则, 如果 doSomeInstancing 的<strong> <code>__proto__</code> </strong>没有这个属性, 浏览器就会去查找 doSomeInstancing 的<strong> <code>__proto__</code> </strong>的 <strong><code>__proto__</code> </strong>，看它是否有这个属性.&nbsp;</p>
<hr />
<p>&nbsp;</p>
<p>默认情况下, 所有函数的原型属性的<strong> <code>__proto__</code> </strong>就是<strong> <code>window.Object.prototype</code></strong>. 所以 doSomeInstancing 的 <strong><code>__proto__</code></strong> 的<strong> <code>__proto__</code> </strong>(也就是 doSomething.prototype 的 <code>__proto__</code> (也就是 <code>Object.prototype</code>)) 会被查找是否有这个属性. 如果没有在它里面找到这个属性, 然后就会在 doSomeInstancing 的<strong> <code>__proto__</code></strong> 的<strong> <code>__proto__</code></strong> 的<strong> <code>__proto__</code> </strong>里面查找. 然而这有一个问题: doSomeInstancing 的<strong> <code>__proto__</code></strong> 的<strong> <code>__proto__</code> </strong>的<strong> <code>__proto__</code></strong> 不存在. 最后, 原型链上面的所有的 <strong><code>__proto__</code> </strong>都被找完了, 浏览器所有已经声明了的 <strong><code>__proto__</code></strong> 上都不存在这个属性，然后就得出结论，这个属性是<strong> <code>undefined</code></strong>.</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　function</span><span style="color: #000000;"> doSomething(){}
　　　　doSomething.prototype.foo </span>= "bar"<span style="color: #000000;">;
　　　　</span><span style="color: #0000ff;">var</span> doSomeInstancing = <span style="color: #0000ff;">new</span><span style="color: #000000;"> doSomething();
　　　　doSomeInstancing.prop </span>= "some value"<span style="color: #000000;">;
　　　　console.log(</span>"doSomeInstancing.prop:      " +<span style="color: #000000;"> doSomeInstancing.prop);
　　　　console.log(</span>"doSomeInstancing.foo:       " +<span style="color: #000000;"> doSomeInstancing.foo);
　　　　console.log(</span>"doSomething.prop:           " +<span style="color: #000000;"> doSomething.prop);
　　　　console.log(</span>"doSomething.foo:            " +<span style="color: #000000;"> doSomething.foo);
　　　　console.log(</span>"doSomething.prototype.prop: " +<span style="color: #000000;"> doSomething.prototype.prop);
　　　　console.log(</span>"doSomething.prototype.foo:  " + doSomething.prototype.foo);</pre>
</div>
<p>&nbsp;</p>
<p><strong>结果:</strong></p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">　　　　doSomeInstancing.prop:      some value
　　　　doSomeInstancing.foo:       bar
　　　　doSomething.prop:           undefined
　　　　doSomething.foo:            undefined
　　　　doSomething.prototype.prop: undefined
　　　　doSomething.prototype.foo:  bar</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<h1 data-id="heading-1">理解原型对象</h1>
<p>让我们回到<strong> <code>Person()</code> </strong>构造器的例子。请把下面代码例子依次写入浏览器控制台。。</p>
<p>本例中我们首先将定义一个构造器函数：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　function</span><span style="color: #000000;"> Person(first, last, age, gender, interests) {
  
　　　　  </span><span style="color: #008000;">//</span><span style="color: #008000;"> 属性与方法定义</span>
<span style="color: #000000;">  
　　　　};</span></pre>
</div>
<p>然后在控制台创建一个对象实例：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　var</span> person1 = <span style="color: #0000ff;">new</span> Person('Bob', 'Smith', 32, 'male', ['music', 'skiing']);</pre>
</div>
<p>&nbsp;</p>
<p>在 JavaScript 控制台输入 "<strong><code>person1.</code></strong>"，你会看到，浏览器将根据这个对象的可用的成员名称进行自动补全：</p>
<p><img class="lazyload inited loaded" src="https://user-gold-cdn.xitu.io/2020/4/24/171a9ed714e63cd9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="" data-src="https://user-gold-cdn.xitu.io/2020/4/24/171a9ed714e63cd9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" data-width="355" data-height="361"></p>
<p>&nbsp;在这个列表中，你可以看到定义在 <strong><code>person1</code> </strong>的原型对象、即 <strong><code>Person()</code></strong> 构造器中的成员&mdash;&mdash; <code>name</code>、<code>age</code>、<code>gender</code>、<code>interests</code>、<code>bio</code>、<code>greeting</code>。同时也有一些其他成员&mdash;&mdash; <code>watch</code>、<code>valueOf</code> 等等&mdash;&mdash;这些成员定义在<strong> <code>Person()</code> </strong>构造器的原型对象、即 <code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" rel="nofollow noopener noreferrer" target="_blank">Object</a></code> 之上。下图展示了原型链的运作机制。</p>
<p><img title="原型链" src="https://user-gold-cdn.xitu.io/2020/4/24/171a9edcb0151094?imageslim" alt="" width="700" height="150"></p>
<p>&nbsp;</p>
<p>那么，调用<strong> <code>person1</code></strong> 的&ldquo;实际定义在 <code>Object</code> 上&rdquo;的方法时，会发生什么？比如：</p>
<div class="cnblogs_code">
<pre>　　　　person1.valueOf()</pre>
</div>
<p>&nbsp;</p>
<p>这个方法仅仅返回了被调用对象的值。在这个例子中发生了如下过程：</p>
<ul>
<li>浏览器首先检查，<strong><code>person1</code></strong> 对象是否具有可用的<strong> <code>valueOf()</code></strong> 方法。</li>
<li>如果没有，则浏览器检查 <strong><code>person1</code> </strong>对象的原型对象（即 <code>Person</code>构造函数的prototype属性所指向的对象）是否具有可用的<strong> <code>valueof()</code> </strong>方法。</li>
<li>如果也没有，则浏览器检查 <strong><code>Person()</code> </strong>构造函数的<strong>prototype</strong>属性所指向的对象的原型对象（即 <code>Object</code>构造函数的prototype属性所指向的对象）是否具有可用的 <strong><code>valueOf()</code></strong> 方法。这里有这个方法，于是该方法被调用。</li>
</ul>
<p>&nbsp;</p>
<div>
<p><strong>注意：必须重申，原型链中的方法和属性没有被复制到其他对象&mdash;&mdash;它们被访问需要通过前面所说的&ldquo;原型链&rdquo;的方式。</strong></p>
</div>
<div>
<p><strong>注意：没有官方的方法用于直接访问一个对象的原型对象&mdash;&mdash;原型链中的&ldquo;连接&rdquo;被定义在一个内部属性中，在 JavaScript 语言标准中用 </strong><code><strong>[[prototype]]</strong></code><strong> 表示（参见 </strong><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/ECMAScript" rel="nofollow noopener noreferrer" target="_blank"><strong>ECMAScript</strong></a><strong>）。然而，大多数现代浏览器还是提供了一个名为 </strong><code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto" rel="nofollow noopener noreferrer" target="_blank"><strong>__proto__</strong></a></code><strong> （前后各有2个下划线）的属性，其包含了对象的原型。你可以尝试输入 </strong><code><strong>person1.__proto__</strong></code><strong> 和 </strong><code><strong>person1.__proto__.__proto__</strong></code><strong>，看看代码中的原型链是什么样的！</strong></p>
</div>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<h1 data-id="heading-2">prototype 属性：继承成员被定义的地方</h1>
<p>那么，那些继承的属性和方法在哪儿定义呢？如果你查看 <code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" rel="nofollow noopener noreferrer" target="_blank">Object</a></code> 参考页，会发现左侧列出许多属性和方法&mdash;&mdash;大大超过我们在 <strong><code>person1</code> </strong>对象中看到的继承成员的数量。某些属性或方法被继承了，而另一些没有&mdash;&mdash;为什么呢？</p>
<p>&nbsp;</p>
<p>原因在于，继承的属性和方法是定义在 <strong><code>prototype</code> </strong>属性之上的（你可以称之为子命名空间 (sub namespace) ）&mdash;&mdash;那些以<strong> <code>Object.prototype.</code></strong> 开头的属性，而非仅仅以 <code><strong>Object</strong>.</code> 开头的属性。<strong><code>prototype</code></strong> 属性的值是一个对象，我们希望被原型链下游的对象继承的属性和方法，都被储存在其中。</p>
<p>&nbsp;</p>
<p>于是 <code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/watch" rel="nofollow noopener noreferrer" target="_blank">Object.prototype.watch()</a>、</code><code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf" rel="nofollow noopener noreferrer" target="_blank">Object.prototype.valueOf()</a></code> 等等成员，适用于任何继承自<strong> <code>Object()</code> </strong>的对象类型，包括使用构造器创建的新的对象实例。</p>
<p><code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is" rel="nofollow noopener noreferrer" target="_blank">Object.is()</a></code>、<code><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" rel="nofollow noopener noreferrer" target="_blank">Object.keys()</a></code>，以及其他不在 <code>prototype</code> 对象内的成员，不会被&ldquo;对象实例&rdquo;或&ldquo;继承自 <strong><code>Object()</code> </strong>的对象类型&rdquo;所继承。这些方法/属性仅能被<strong> <code>Object()</code></strong> 构造器自身使用。</p>
<p><span style="text-decoration: underline;">&nbsp;</span></p>
<p>&nbsp;</p>
<div>
<p><strong>注意：这看起来很奇怪&mdash;&mdash;构造器本身就是函数，你怎么可能在构造器这个函数中定义一个方法呢？其实函数也是一个对象类型</strong><strong>。</strong></p>
<p>&nbsp;</p>
</div>
<ol>
<li style="list-style-type: none;"><ol>
<li>你可以检查已有的 <strong><code>prototype</code> </strong>属性。回到先前的例子，在 JavaScript 控制台输入：
<div class="cnblogs_code">
<pre>　　　　Person.prototype</pre>
</div>
</li>
<li>输出并不多，毕竟我们没有为自定义构造器的原型定义任何成员。缺省状态下，构造器的<strong> <code>prototype</code></strong> 属性初始为空白。现在尝试：
<div class="cnblogs_code">
<pre>　　　　Object.prototype</pre>
</div>
</li>
</ol></li>
</ol>
<p>&nbsp;</p>
<p>你会看到<strong> <code>Object</code> </strong>的 <strong><code>prototype</code></strong> 属性上定义了大量的方法；如前所示，继承自 <strong><code>Object</code> </strong>的对象都可以使用这些方法。</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>JavaScript 中到处都是通过原型链继承的例子。比如，你可以尝试从 <code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" rel="nofollow noopener noreferrer" target="_blank">String</a></code>、<code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" rel="nofollow noopener noreferrer" target="_blank">Date</a></code>、<code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" rel="nofollow noopener noreferrer" target="_blank">Number</a></code> 和 <code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" rel="nofollow noopener noreferrer" target="_blank">Array</a></code> 全局对象的原型中寻找方法和属性。它们都在原型上定义了一些方法，因此当你创建一个字符串时：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　var</span> myString = 'This is my string.';</pre>
</div>
<p><code>myString</code> 立即具有了一些有用的方法，如 <code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" rel="nofollow noopener noreferrer" target="_blank">split()</a></code>、<code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" rel="nofollow noopener noreferrer" target="_blank">indexOf()</a></code>、<code><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" rel="nofollow noopener noreferrer" target="_blank">replace()</a></code> 等。</p>
<p><strong>重要：</strong><code><strong>prototype</strong></code><strong> 属性大概是 JavaScript 中最容易混淆的名称之一。你可能会认为，</strong><code><strong>this</strong></code><strong> 关键字指向当前对象的原型对象，其实不是（还记得么？原型对象是一个内部对象，应当使用</strong><code><strong> __proto__</strong></code><strong> 访问）。</strong><code><strong>prototype</strong></code><strong> 属性包含（指向）一个对象，你在这个对象中定义需要被继承的成员。</strong></p>
<p><strong>&nbsp;</strong></p>
<h2><strong>create()</strong></h2>
<p><strong><code>Object.create()</code> </strong>方法可以创建新的对象实例。</p>
<ol>
<li style="list-style-type: none;"><ol>
<li>例如，在上个例子的 JavaScript 控制台中输入：
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　        var</span> person2 = Object.create(person1);</pre>
</div>
</li>
<li><code>create()</code> 实际做的是从指定原型对象创建一个新的对象。这里以<strong> <code>person1</code> </strong>为原型对象创建了 <strong><code>person2</code> </strong>对象。在控制台输入：
<div class="cnblogs_code">
<pre>　        　person2.__proto__</pre>
</div>
</li>
</ol></li>
</ol>
<p>&nbsp;</p>
<p>结果返回对象<strong><code>person1</code></strong>。</p>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<h1 data-id="heading-3">constructor 属性</h1>
<p><strong>每个实例对象都从原型中继承了一个constructor属性，该属性指向了用于构造此实例对象的构造函数。</strong></p>
<ol>
<li style="list-style-type: none;"><ol>
<li>例如，继续在控制台中尝试下面的指令：
<div class="cnblogs_code">
<pre><span style="color: #000000;">        person1.constructor
        person2.constructor</span></pre>
</div>
<p>都将返回 <code>Person()</code> 构造器，因为该构造器包含这些实例的原始定义。</p>
<p>一个小技巧是，你可以在 <strong><code>constructor</code></strong> 属性的末尾添加一对圆括号（括号中包含所需的参数），从而用这个构造器创建另一个对象实例。毕竟构造器是一个函数，故可以通过圆括号调用；只需在前面添加 <code>new</code> 关键字，便能将此函数作为构造器使用。</p>
<ol>
<li>在控制台中输入：
<div class="cnblogs_code">
<pre>              <span style="color: #0000ff;">var</span> person3 = <span style="color: #0000ff;">new</span> person1.constructor(<span style="color: #800000;">'</span><span style="color: #800000;">Karen</span><span style="color: #800000;">'</span><span style="color: #000000;">, 
                  </span><span style="color: #800000;">'</span><span style="color: #800000;">Stephenson</span><span style="color: #800000;">'</span>, <span style="color: #800080;">26</span><span style="color: #000000;">,
                  </span><span style="color: #800000;">'</span><span style="color: #800000;">female</span><span style="color: #800000;">'</span><span style="color: #000000;">, 
                 [</span><span style="color: #800000;">'</span><span style="color: #800000;">playing drums</span><span style="color: #800000;">'</span>, <span style="color: #800000;">'</span><span style="color: #800000;">mountain climbing</span><span style="color: #800000;">'</span>]);</pre>
</div>
</li>
<li>现在尝试访问新建对象的属性，例如：
<div class="cnblogs_code">
<pre><span style="color: #000000;">                person3.name.first
                person3.age
                person3.bio()</span></pre>
</div>
</li>
</ol></li>
</ol></li>
</ol>
<p>&nbsp;</p>
<p>正常工作。通常你不会去用这种方法创建新的实例；但如果你刚好因为某些原因没有原始构造器的引用，那么这种方法就很有用了。</p>
<p>此外，<strong><code>constructor</code> </strong>属性还有其他用途。比如，想要获得某个对象实例的构造器的名字，可以这么用：</p>
<div class="cnblogs_code">
<pre>　　　　instanceName.constructor.name</pre>
</div>
<p>具体地，像这样：</p>
<div class="cnblogs_code">
<pre>　　　　person1.constructor.name</pre>
</div>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<h1 data-id="heading-4">修改原型</h1>
<p><strong>从我们从下面这个例子来看一下如何修改构造器的 <code>prototype</code> 属性。</strong></p>
<p>向构造器的 <code>prototype</code> 添加了一个新的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">　　　　function</span><span style="color: #000000;"> Person(first, last, age, gender, interests) {

  　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;"> 属性与方法定义</span>
<span style="color: #000000;">
　　　　};

　　　　</span><span style="color: #0000ff;">var</span> person1 = <span style="color: #0000ff;">new</span> Person('Tammi', 'Smith', 32, 'neutral', ['music', 'skiing', 'kickboxing'<span style="color: #000000;">]);

　　　　Person.prototype.farewell </span>= <span style="color: #0000ff;">function</span><span style="color: #000000;">() {
　　　　  alert(</span><span style="color: #0000ff;">this</span>.name.first + ' has left the building. Bye for now!'<span style="color: #000000;">);
　　　　}</span></pre>
</div>
<p>&nbsp;</p>
<p><strong>但是 <code>farewell()</code> 方法仍然可用于 <code>person1</code> 对象实例&mdash;&mdash;旧有对象实例的可用功能被自动更新了。这证明了先前描述的原型链模型。这种继承模型下，上游对象的方法不会复制到下游的对象实例中；下游对象本身虽然没有定义这些方法，但浏览器会通过上溯原型链、从上游对象中找到它们。这种继承模型提供了一个强大而可扩展的功能系统。</strong></p>
<p>&nbsp;</p>
<p>你很少看到属性定义在 prototype 属性中，因为如此定义不够灵活。比如，你可以添加一个属性：</p>
<div class="cnblogs_code">
<pre>　　　　Person.prototype.fullName = 'Bob Smith';</pre>
</div>
<p>但这不够灵活，因为人们可能不叫这个名字。用 <code>name.first</code> 和 <code>name.last</code> 组成 <code>fullName</code> 会好很多：</p>
<div class="cnblogs_code">
<pre>　　　　Person.prototype.fullName = <span style="color: #0000ff;">this</span>.name.first + ' ' + <span style="color: #0000ff;">this</span>.name.last;</pre>
</div>
<p>&nbsp;</p>
<p>然而，这么做是无效的，因为本例中 <code>this</code> 引用全局范围，而非函数范围。访问这个属性只会得到 <code>undefined undefined</code>。但这个语句若放在 先前定义在 <code>prototype</code> 上的方法中则有效，因为此时语句位于函数范围内，从而能够成功地转换为对象实例范围。你可能会在 <code>prototype</code> 上定义常属性 (constant property) （指那些你永远无需改变的属性），但一般来说，在构造器内定义属性更好。</p>
<div>
<p><strong>注</strong><strong>：关于 </strong><code><strong>this</strong></code><strong> 关键字指代（引用）什么范围/哪个对象，这个问题超出了本文讨论范围。事实上，这个问题有点复杂，如果现在你没能理解，也不用担心。</strong></p>
<p><strong>&nbsp;</strong></p>
</div>
<p>事实上，一种极其常见的对象定义模式是，<strong>在构造器（函数体）中定义属性、在 </strong><code><strong>prototype</strong></code><strong> 属性上定义方法。</strong>如此，构造器只包含属性定义，而方法则分装在不同的代码块，代码更具可读性。例如：</p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">　　　　//</span><span style="color: #008000;"> 构造器及其属性定义</span>

　　　　<span style="color: #0000ff;">function</span><span style="color: #000000;"> Test(a,b,c,d) {
　　　　  </span><span style="color: #008000;">//</span><span style="color: #008000;"> 属性定义</span>
　　　　<span style="color: #000000;">};

　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;"> 定义第一个方法</span>
<span style="color: #000000;">
　　　　Test.prototype.x </span>= <span style="color: #0000ff;">function</span><span style="color: #000000;"> () { ... }

　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;"> 定义第二个方法</span>
<span style="color: #000000;">
　　　　Test.prototype.y </span>= <span style="color: #0000ff;">function</span><span style="color: #000000;"> () { ... }

　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;"> 等等&hellip;&hellip;</span></pre>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<hr />
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>本文介绍了 JavaScript 对象原型，包括原型链如何允许对象之间继承特性、<code>prototype</code> 属性、如何通过它来向构造器添加方法。</strong></p>
<h3 data-id="heading-5">如果大家有任何疑问即可留言反馈，会在第一时间回复反馈，谢谢大家！</h3>
<h3>文章参考来源：<a href="https://developer.mozilla.org/en-US/" rel="nofollow noopener noreferrer" target="_blank">MDN文档</a></h3>
<h3>本文为Tz张无忌文章，读后有收获可以请作者喝杯咖啡，转载请文章注明出处：<a href="https://www.cnblogs.com/zhaohongcheng/">https://www.cnblogs.com/zhaohongcheng/</a></h3>
</div>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 11:43</span>&nbsp;
<a href="https://www.cnblogs.com/zhaohongcheng/">TZ张无忌</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12766000" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12766000);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 511456, cb_blogApp = 'zhaohongcheng', cb_blogUserGuid = '1e5e03bb-e67b-40a3-1a3c-08d6c678d591';
    var cb_entryId = 12766000, cb_entryCreatedDate = '2020-04-24 11:43', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 TZ张无忌
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>