<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="一般我们对缓存读操作的时候有这么一个固定的套路： 如果我们的数据在缓存里边有，那么就直接取缓存的。 如果缓存里没有我们想要的数据，我们会先去查询数据库，然后将数据库查出来的数据写到缓存中。 最后将数据" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Redis的三大问题 - 欧小文大叔 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/elf/bundle-elf.min.css?v=mpcef9xxdj1doWi6glkD6lMbmGclGCSPM_FSrhFRY-A" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/elf/bundle-elf-mobile.min.css?v=Lk2wjMMUJjSLadG0Xil7JdDLDWWAvcpQmxzjUgc7cAk" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/YancyL/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/YancyL/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/YancyL/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 469762;
        var currentBlogApp = 'YancyL';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'elf';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/YancyL/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/YancyL/">欧小文大叔</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/YancyL/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%AC%A7%E5%B0%8F%E6%96%87%E5%A4%A7%E5%8F%94">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/YancyL/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
6&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
0</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/YancyL/p/12757394.html">Redis的三大问题</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><span style="font-size: 15px;">一般我们对缓存读操作的时候有这么一个固定的套路：</span></p>
<ul>
<li><span style="font-size: 15px;">如果我们的数据在缓存里边有，那么就直接取缓存的。</span></li>
<li><span style="font-size: 15px;">如果缓存里没有我们想要的数据，我们会先去查询数据库，然后将数据库查出来的数据写到缓存中。</span></li>
<li><span style="font-size: 15px;">最后将数据返回给请求</span></li>
</ul>
<p><span style="font-size: 15px;">代码例子:</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">@Override
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">public</span><span style="color: #000000;">  R selectOrderById(Integer id) {
</span><span style="color: #008080;"> 3</span>     <span style="color: #008000;">//</span><span style="color: #008000;">查询缓存</span>
<span style="color: #008080;"> 4</span>     Object redisObj =<span style="color: #000000;"> valueOperations.get(String.valueOf(id));
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>     <span style="color: #008000;">//</span><span style="color: #008000;">命中缓存</span>
<span style="color: #008080;"> 7</span>     <span style="color: #0000ff;">if</span>(redisObj != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;"> 8</span>         <span style="color: #008000;">//</span><span style="color: #008000;">正常返回数据</span>
<span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(200).setData(redisObj).setMsg("OK"<span style="color: #000000;">);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">11</span>     Order order =<span style="color: #000000;"> orderMapper.selectOrderById(id);
</span><span style="color: #008080;">12</span>     <span style="color: #0000ff;">if</span> (order != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">13</span>          valueOperations.set(String.valueOf(id), order);  <span style="color: #008000;">//</span><span style="color: #008000;">加入缓存</span>
<span style="color: #008080;">14</span>          <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(200).setData(order).setMsg("OK"<span style="color: #000000;">);
</span><span style="color: #008080;">15</span> <span style="color: #000000;">     }
</span><span style="color: #008080;">16</span>      <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(500).setData(<span style="color: #0000ff;">new</span> NullValueResultDO()).setMsg("查询无果"<span style="color: #000000;">);
</span><span style="color: #008080;">17</span> }   </pre>
</div>
<p><span style="font-size: 15px;">但这样写的代码是不行的,这代码里就有我们缓存的三大问题的两大问题.穿透,击穿.</span></p>
<h1>一,缓存雪崩</h1>
<h2>1.1什么是缓存雪崩?</h2>
<p><span style="font-size: 15px;">第一种情况:Redis挂掉了,请求全部走数据库.</span></p>
<p><span style="font-size: 15px;">第二种情况:缓存数据设置的过期时间是相同的,然后刚好这些数据删除了,全部失效了,这个时候全部请求会到数据库</span></p>
<p><span style="font-size: 15px;">缓存雪崩如果发生了,很有可能会把我们的数据库搞垮,导致整个服务器瘫痪.</span></p>
<h2>1.2如何解决缓存雪崩?</h2>
<p><span style="font-size: 15px;">对于第二种情况,非常好解决:</span></p>
<p><span style="font-size: 15px;">　　在存缓存的时候给过期时间加上一个随机值,这样大幅度的减少缓存同时过期.</span></p>
<p><span style="font-size: 15px;">第一种情况:</span></p>
<p><span style="font-size: 15px;">　　事发前：实现Redis的高可用(主从架构+Sentinel&nbsp;或者Redis&nbsp;Cluster)，尽量避免Redis挂掉这种情况发生。</span><br /><span style="font-size: 15px;">　　事发中：万一Redis真的挂了，我们可以设置本地缓存(ehcache)+限流(hystrix)，尽量避免我们的数据库被干掉(起码能保证我们的服务还是能正常工作的)</span><br /><span style="font-size: 15px;">　　事发后：redis持久化，重启后自动从磁盘上加载数据，快速恢复缓存数据。</span></p>
<h1>二,缓存穿透</h1>
<h2>2.1什么是缓存穿透?</h2>
<p><span style="font-size: 15px;">比如你抢了你同事的女神,你同事很气,想搞你,在你的项目里,每次请求的ID为负数.这个时候缓存肯定是没有的,缓存就没用了,请求就会全部找数据库,但数据库也没用这个值.所以每次返回空出去.</span></p>
<p><span style="font-size: 15px;">缓存穿透是指查询一个一定不存在的数据。由于缓存不命中，并且出于容错考虑，如果从数据库查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，失去了缓存的意义。</span></p>
<p><span style="font-size: 15px;">这就是缓存穿透:</span></p>
<p><span style="font-size: 15px;">请求的数据在缓存大量不命中，导致请求走数据库。</span></p>
<p><span style="font-size: 15px;">缓存穿透如果发生了，也可能把我们的数据库搞垮，导致整个服务瘫痪！</span></p>
<h2>2.2如何解决缓存穿透?</h2>
<p><span style="font-size: 15px;">解决缓存穿透也有两种方案：</span></p>
<ul>
<li><span style="font-size: 15px;">由于请求的参数是不合法的(每次都请求不存在的参数)，于是我们可以使用布隆过滤器(BloomFilter)或者压缩filter提前拦截，不合法就不让这个请求到数据库层！</span></li>
<li><span style="font-size: 15px;">当我们从数据库找不到的时候，我们也将这个空对象设置到缓存里边去。下次再请求的时候，就可以从缓存里边获取了。这种情况我们一般会将空对象设置一个较短的过期时间。</span></li>


</ul>
<p><span style="font-size: 15px;"><strong>缓存空对象代码例子:</strong></span></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span>     <span style="color: #0000ff;">public</span><span style="color: #000000;"> R selectOrderById(Integer id) {
</span><span style="color: #008080;">2</span>         <span style="color: #0000ff;">return</span> cacheTemplate.redisFindCache(String.valueOf(id), 10, TimeUnit.MINUTES, <span style="color: #0000ff;">new</span> CacheLoadble&lt;Order&gt;<span style="color: #000000;">() {
</span><span style="color: #008080;">3</span> <span style="color: #000000;">            @Override
</span><span style="color: #008080;">4</span>             <span style="color: #0000ff;">public</span><span style="color: #000000;"> Order load() {
</span><span style="color: #008080;">5</span>                 <span style="color: #0000ff;">return</span><span style="color: #000000;"> orderMapper.selectOrderById(id);
</span><span style="color: #008080;">6</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">7</span>         },<span style="color: #0000ff;">false</span><span style="color: #000000;">);
</span><span style="color: #008080;">8</span>     }</pre>
</div>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> R redisFindCache(String key, <span style="color: #0000ff;">long</span> expire, TimeUnit unit, CacheLoadble&lt;T&gt; cacheLoadble, <span style="color: #0000ff;">boolean</span><span style="color: #000000;"> b) {
</span><span style="color: #008080;"> 2</span>         <span style="color: #008000;">//</span><span style="color: #008000;">查询缓存</span>
<span style="color: #008080;"> 3</span>         Object redisObj =<span style="color: #000000;"> valueOperations.get(String.valueOf(key));
</span><span style="color: #008080;"> 4</span>         <span style="color: #008000;">//</span><span style="color: #008000;">命中缓存</span>
<span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">if</span> (redisObj != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;"> 6</span>             <span style="color: #0000ff;">if</span>(redisObj <span style="color: #0000ff;">instanceof</span><span style="color: #000000;"> NullValueResultDO){
</span><span style="color: #008080;"> 7</span>                 <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(500).setData(<span style="color: #0000ff;">new</span> NullValueResultDO()).setMsg("查询无果"<span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 9</span>             <span style="color: #008000;">//</span><span style="color: #008000;">正常返回数据</span>
<span style="color: #008080;">10</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(200).setData(redisObj).setMsg("OK"<span style="color: #000000;">);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">12</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">13</span>             T load = cacheLoadble.load();<span style="color: #008000;">//</span><span style="color: #008000;">查询数据库</span>
<span style="color: #008080;">14</span>             <span style="color: #0000ff;">if</span> (load != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">15</span>                 valueOperations.set(key, load, expire, unit);  <span style="color: #008000;">//</span><span style="color: #008000;">加入缓存</span>
<span style="color: #008080;">16</span>                 <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(200).setData(load).setMsg("OK"<span style="color: #000000;">);
</span><span style="color: #008080;">17</span>             }<span style="color: #0000ff;">else</span><span style="color: #000000;">{
</span><span style="color: #008080;">18</span>                 valueOperations.set(key,<span style="color: #0000ff;">new</span><span style="color: #000000;"> NullValueResultDO(),expire,unit);
</span><span style="color: #008080;">19</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">20</span> 
<span style="color: #008080;">21</span>         } <span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">24</span>         <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(500).setData(<span style="color: #0000ff;">new</span> NullValueResultDO()).setMsg("查询无果"<span style="color: #000000;">);
</span><span style="color: #008080;">25</span>     }</pre>
</div>
<p><span style="font-size: 15px;">这里封装了一个模板redisFindCache,不然每一个方法都要写这个流程.注意在命中缓存时,要判断数据是否是空对象.</span></p>
<p><span style="font-size: 15px;">空对象:</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;">1</span> <span style="color: #000000;">@Getter
</span><span style="color: #008080;">2</span> <span style="color: #000000;">@Setter
</span><span style="color: #008080;">3</span> <span style="color: #000000;">@ToString
</span><span style="color: #008080;">4</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> NullValueResultDO{
</span><span style="color: #008080;">5</span> 
<span style="color: #008080;">6</span> }</pre>
</div>
<p><span style="font-size: 15px;">缓存空对象的缺点:有大量的空数据占用redis的内存.治标不治本.</span></p>
<p><span style="font-size: 15px;"><strong>布隆过滤器:</strong></span></p>
<p><span style="font-size: 15px;">　　有谷歌的guava,但是是单机版的,不支持分布式.</span></p>
<p><span style="font-size: 15px;">　　也可以用redis的位数组bit手写一个分布式布隆过滤器,代码就不写了.过程就是先把id(比如你是用id为key的)存进布隆过滤器(会经过特定的算法),当我们请求接口的时候先让它查询布隆过滤器,判断数据是否存在.</span></p>
<p><span style="font-size: 15px;"><strong>上面的代码还有个缓存击穿(缓存当中没有,数据库中有)问题,就是并发的时候.比如99个人同时请求,还是会打印99条sql语句,还是会找数据库.</strong></span></p>
<p><span style="font-size: 15px;">这里的代码是用的分布式锁(互斥锁)</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span> R redisFindCache(String key, <span style="color: #0000ff;">long</span> expire, TimeUnit unit, CacheLoadble&lt;T&gt; cacheLoadble,<span style="color: #0000ff;">boolean</span><span style="color: #000000;"> b){
</span><span style="color: #008080;"> 2</span>         <span style="color: #008000;">//</span><span style="color: #008000;">判断是否走过滤器</span>
<span style="color: #008080;"> 3</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;">(b){
</span><span style="color: #008080;"> 4</span>             <span style="color: #008000;">//</span><span style="color: #008000;">先走过滤器</span>
<span style="color: #008080;"> 5</span>             <span style="color: #0000ff;">boolean</span> bloomExist =<span style="color: #000000;"> bloomFilter.isExist(String.valueOf(key));
</span><span style="color: #008080;"> 6</span>             <span style="color: #0000ff;">if</span>(!<span style="color: #000000;">bloomExist){
</span><span style="color: #008080;"> 7</span>                 <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(600).setData(<span style="color: #0000ff;">null</span>).setMsg("查询无果"<span style="color: #000000;">);
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">10</span>         <span style="color: #008000;">//</span><span style="color: #008000;">查询缓存</span>
<span style="color: #008080;">11</span>         Object redisObj =<span style="color: #000000;"> valueOperations.get(String.valueOf(key));
</span><span style="color: #008080;">12</span>         <span style="color: #008000;">//</span><span style="color: #008000;">命中缓存</span>
<span style="color: #008080;">13</span>         <span style="color: #0000ff;">if</span>(redisObj != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">14</span>             <span style="color: #008000;">//</span><span style="color: #008000;">正常返回数据</span>
<span style="color: #008080;">15</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(200).setData(redisObj).setMsg("OK"<span style="color: #000000;">);
</span><span style="color: #008080;">16</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">17</span> <span style="color: #008000;">//</span><span style="color: #008000;">        RLock lock0 = redisson.getLock("{taibai0}:" + key);
</span><span style="color: #008080;">18</span> <span style="color: #008000;">//</span><span style="color: #008000;">        RLock lock1 = redisson.getLock("{taibai1}:" + key);
</span><span style="color: #008080;">19</span> <span style="color: #008000;">//</span><span style="color: #008000;">        RLock lock2 = redisson.getLock("{taibai2}:" + key);
</span><span style="color: #008080;">20</span> <span style="color: #008000;">//</span><span style="color: #008000;">        RedissonMultiLock lock = new RedissonMultiLock(lock0,lock1, lock2);</span>
<span style="color: #008080;">21</span>         <span style="color: #0000ff;">try</span><span style="color: #000000;"> {
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        redisLock.lock(key);//上锁
</span><span style="color: #008080;">23</span> <span style="color: #008000;">//</span><span style="color: #008000;">        lock.lock();
</span><span style="color: #008080;">24</span>         <span style="color: #008000;">//</span><span style="color: #008000;">查询缓存</span>
<span style="color: #008080;">25</span>         redisObj =<span style="color: #000000;"> valueOperations.get(String.valueOf(key));
</span><span style="color: #008080;">26</span>         <span style="color: #008000;">//</span><span style="color: #008000;">命中缓存</span>
<span style="color: #008080;">27</span>         <span style="color: #0000ff;">if</span>(redisObj != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">28</span>             <span style="color: #008000;">//</span><span style="color: #008000;">正常返回数据</span>
<span style="color: #008080;">29</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(200).setData(redisObj).setMsg("OK"<span style="color: #000000;">);
</span><span style="color: #008080;">30</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">31</span>         T load = cacheLoadble.load();<span style="color: #008000;">//</span><span style="color: #008000;">查询数据库</span>
<span style="color: #008080;">32</span>         <span style="color: #0000ff;">if</span> (load != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
</span><span style="color: #008080;">33</span>             valueOperations.set(key, load,expire, unit);  <span style="color: #008000;">//</span><span style="color: #008000;">加入缓存</span>
<span style="color: #008080;">34</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(200).setData(load).setMsg("OK"<span style="color: #000000;">);
</span><span style="color: #008080;">35</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">36</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> R().setCode(500).setData(<span style="color: #0000ff;">new</span> NullValueResultDO()).setMsg("查询无果"<span style="color: #000000;">);
</span><span style="color: #008080;">37</span>         }<span style="color: #0000ff;">finally</span><span style="color: #000000;"> {
</span><span style="color: #008080;">38</span> <span style="color: #000000;">            redisLock.unlock(key);//解锁
</span><span style="color: #008080;">39</span> <span style="color: #008000;">//</span><span style="color: #008000;">            lock.unlock();</span>
<span style="color: #008080;">40</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">41</span>     }</pre>
</div>
<h1>三,缓存与数据库双写一致</h1>
<h2>3.1什么是缓存与数据库双写一致问题?</h2>
<p><span style="font-size: 15px;">如果仅仅查询的话，缓存的数据和数据库的数据是没问题的。但是，当我们要更新时候呢？各种情况很可能就造成数据库和缓存的数据不一致了。</span></p>
<ul>
<li><span style="font-size: 15px;">这里不一致指的是：数据库的数据跟缓存的数据不一致</span></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/1518010/202004/1518010-20200422220936167-137884109.jpg" alt=""></p>
<p><span style="font-size: 15px;">从理论上说，只要我们设置了键的过期时间，我们就能保证缓存和数据库的数据最终是一致的。因为只要缓存数据过期了，就会被删除。随后读的时候，因为缓存里没有，就可以查数据库的数据，然后将数据库查出来的数据写入到缓存中。</span><br /><br /><span style="font-size: 15px;">除了设置过期时间，我们还需要做更多的措施来尽量避免数据库与缓存处于不一致的情况发生。</span></p>
<h2>3.2对于更新操作</h2>
<p><span style="font-size: 15px;">一般来说，执行更新操作时，我们会有两种选择：</span></p>
<ul>
<li><span style="font-size: 15px;">先操作数据库，再操作缓存</span></li>
<li><span style="font-size: 15px;">先操作缓存，再操作数据库</span></li>



</ul>
<p><span style="font-size: 15px;">首先，要明确的是，无论我们选择哪个，我们都希望这两个操作要么同时成功，要么同时失败。所以，这会演变成一个分布式事务的问题。</span></p>
<p><span style="font-size: 15px;">所以，如果原子性被破坏了，可能会有以下的情况：</span></p>
<ul>
<li><span style="font-size: 15px;">操作数据库成功了，操作缓存失败了。</span></li>
<li><span style="font-size: 15px;">操作缓存成功了，操作数据库失败了。</span></li>



</ul>
<p><span style="font-size: 15px;">如果第一步已经失败了，我们直接返回Exception出去就好了，第二步根本不会执行。</span></p>
<p><span style="font-size: 15px;">下面我们具体来分析一下吧。</span></p>
<h3>3.2.1操作缓存</h3>
<p><span style="font-size: 15px;">操作缓存也有两种方案：</span></p>
<ul>
<li><span style="font-size: 15px;">更新缓存</span></li>
<li><span style="font-size: 15px;">删除缓存</span></li>



</ul>
<p><span style="font-size: 15px;">一般我们都是采取删除缓存缓存策略的，原因如下:</span></p>
<ol>
<li><span style="font-size: 15px;">高并发环境下，无论是先操作数据库还是后操作数据库而言，如果加上更新缓存，那就更加容易导致数据库与缓存数据不一致问题。(删除缓存直接和简单很多)</span></li>
<li><span style="font-size: 15px;">如果每次更新了数据库，都要更新缓存【这里指的是频繁更新的场景，这会耗费一定的性能】，倒不如直接删除掉。等再次读取时，缓存里没有，那我到数据库找，在数据库找到再写到缓存里边(体现懒加载)</span></li>



</ol>
<p><span style="font-size: 15px;">基于这两点，对于缓存在更新时而言，都是建议执行删除操作！</span></p>
<h3>3.2.2先更新数据库,再删除缓存</h3>
<p><span style="font-size: 15px;">正常情况是这样的:</span></p>
<ul>
<li><span style="font-size: 15px;">先操作数据库,成功</span></li>
<li><span style="font-size: 15px;">在删除缓存,也成功</span></li>



</ul>
<p><span style="font-size: 15px;">如果原子性被破坏了:</span></p>
<ul>
<li><span style="font-size: 15px;">第一步成功(操作数据库)，第二步失败(删除缓存)，会导致数据库里是新数据，而缓存里是旧数据。</span></li>
<li><span style="font-size: 15px;">如果第一步(操作数据库)就失败了，我们可以直接返回错误(Exception)，不会出现数据不一致。</span></li>



</ul>
<p><span style="font-size: 15px;">如果在高并发的场景下，出现数据库与缓存数据不一致的概率特别低，也不是没有：</span></p>
<ul>
<li><span style="font-size: 15px;">缓存刚好失效</span></li>
<li><span style="font-size: 15px;">线程A查询数据库，得一个旧值</span></li>
<li><span style="font-size: 15px;">线程B将新值写入数据库</span></li>
<li><span style="font-size: 15px;">线程B删除缓存</span></li>
<li><span style="font-size: 15px;">线程A将查到的旧值写入缓存</span></li>



</ul>
<p><span style="font-size: 15px;">要达成上述情况，还是说一句概率特别低：</span></p>
<p><span style="font-size: 15px;">因为这个条件需要发生在读缓存时缓存失效，而且并发着有一个写操作。而实际上数据库的写操作会比读操作慢得多，而且还要锁表，而读操作必需在写操作前进入数据库操作，而又要晚于写操作更新缓存，所有的这些条件都具备的概率基本并不大。</span></p>
<p><span style="font-size: 15px;">对于这种策略，其实是一种设计模式：Cache&nbsp;Aside&nbsp;Pattern</span></p>
<p><img src="https://img2020.cnblogs.com/blog/1518010/202004/1518010-20200422222105677-2065822141.png" alt=""></p>
<p>&nbsp;</p>
<p><span style="font-size: 15px;">删除缓存失败的解决思路：</span></p>
<ul>
<li><span style="font-size: 15px;">将需要删除的key发送到消息队列中</span></li>
<li><span style="font-size: 15px;">自己消费消息，获得需要删除的key</span></li>
<li><span style="font-size: 15px;">不断重试删除操作，直到成功</span></li>

</ul>
<h3>&nbsp;3.2.3先删除缓存,在更新数据库</h3>
<p><span style="font-size: 15px;">正常情况是这样的：</span></p>
<ul>
<li><span style="font-size: 15px;">先删除缓存，成功；</span></li>
<li><span style="font-size: 15px;">再更新数据库，也成功；</span></li>



</ul>
<p><span style="font-size: 15px;">如果原子性被破坏了：</span></p>
<ul>
<li><span style="font-size: 15px;">第一步成功(删除缓存)，第二步失败(更新数据库)，数据库和缓存的数据还是一致的。</span></li>
<li><span style="font-size: 15px;">如果第一步(删除缓存)就失败了，我们可以直接返回错误(Exception)，数据库和缓存的数据还是一致的。</span></li>



</ul>
<p><span style="font-size: 15px;">看起来是很美好，但是我们在并发场景下分析一下，就知道还是有问题的了：</span></p>
<ul>
<li><span style="font-size: 15px;">线程A删除了缓存</span></li>
<li><span style="font-size: 15px;">线程B查询，发现缓存已不存在</span></li>
<li><span style="font-size: 15px;">线程B去数据库查询得到旧值</span></li>
<li><span style="font-size: 15px;">线程B将旧值写入缓存</span></li>
<li><span style="font-size: 15px;">线程A将新值写入数据库</span></li>



</ul>
<p><span style="font-size: 15px;">所以也会导致数据库和缓存不一致的问题。</span></p>
<p><span style="font-size: 15px;">并发下解决数据库与缓存不一致的思路：</span></p>
<ul>
<li><span style="font-size: 15px;">将删除缓存、修改数据库、读取缓存等的操作积压到队列里边，实现串行化。</span></li>



</ul>
<p><img src="https://img2020.cnblogs.com/blog/1518010/202004/1518010-20200422222715256-903514192.png" alt=""></p>
<p>&nbsp;</p>
<h3>3.2.4对比着两种策略</h3>
<p><span style="font-size: 15px;">我们可以发现，两种策略各自有优缺点：</span><br /><br /></p>
<ul>
<li><span style="font-size: 15px;">先删除缓存，再更新数据库</span></li>



</ul>
<p><span style="font-size: 15px;">　　　　在高并发下表现不如意，在原子性被破坏时表现优异</span></p>
<ul>
<li><span style="font-size: 15px;">先更新数据库，再删除缓存(Cache&nbsp;Aside&nbsp;Pattern设计模式)</span></li>



</ul>
<p><span style="font-size: 15px;">　　　　在高并发下表现优异，在原子性被破坏时表现不如意</span></p>
<h3>&nbsp;3.2.5其他保障数据一致的方案与资料</h3>
<p><span style="font-size: 15px;">可以用databus或者阿里的canal监听binlog进行更新。</span></p>
<p><span style="font-size: 15px;">参考资料：</span></p>
<ul>
<li><span style="font-size: 15px;">缓存更新的套路</span></li>



</ul>
<p><span style="font-size: 15px;">　　　　https://coolshell.cn/articles/17416.html</span></p>
<ul>
<li><span style="font-size: 15px;">如何保证缓存与数据库双写时的数据一致性？</span></li>



</ul>
<p><span style="font-size: 15px;">　　　　https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/redis-consistence.md</span></p>
<ul>
<li><span style="font-size: 15px;">分布式之数据库和缓存双写一致性方案解析</span></li>



</ul>
<p><span style="font-size: 15px;">　　　　https://zhuanlan.zhihu.com/p/48334686</span></p>
<ul>
<li><span style="font-size: 15px;">Cache&nbsp;Aside&nbsp;Pattern</span></li>



</ul>
<p><span style="font-size: 15px;">　　　　https://blog.csdn.net/z50l2o08e2u4aftor9a/article/details/81008933</span></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 15:27</span>&nbsp;
<a href="https://www.cnblogs.com/YancyL/">欧小文大叔</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12757394" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12757394);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 469762, cb_blogApp = 'YancyL', cb_blogUserGuid = 'c7411b0f-48a2-434c-8ca0-08d637f1d4af';
    var cb_entryId = 12757394, cb_entryCreatedDate = '2020-04-24 15:27', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 欧小文大叔
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>