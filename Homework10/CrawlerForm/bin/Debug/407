<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="Soul app是我司的竞品，对它的语音音乐播放同步联动的逻辑很感兴趣，于是就开启了一波逆向分析。 下面看代码，以及技术分析，直接步入正轨，哈哈。 我们根据https://github.com/xin" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Soul Android app 悬浮view以及帖子中view的联动刷新逆向分析 - xing_star - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/autumn/bundle-autumn.min.css?v=Q7fJaB-DR8HLx1L8cM2iILCLvdrSf4N04786SrXKk3E" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/autumn/bundle-autumn-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/xing-star/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/xing-star/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/xing-star/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 204156;
        var currentBlogApp = 'xing-star';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Autumn';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <table id="blog_header" cellspacing="0" cellpadding="0" width="100%" border="0" class="banner" height="250" background="/skins/autumn/images/bg_banner.jpg">
        <tr>
            <td width="61">
                &nbsp;
            </td>
            <td width="236" align="center">
                
<br><br><br><br><br><br><br>
<div id="header">
	<span>
		<a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/xing-star/">xing_star</a>
<br/><br/>
		


	</span>
</div>


            </td>
            <td style="padding-bottom: 30px" align="center" valign="bottom">
                &nbsp;
            </td>
        </tr>
</table>
<table align="center" width="100%" cellspacing="0" cellpadding="0" border="0">
    <tr>
        <td width="60">
            &nbsp;
        </td>
        <td id="sidebar" valign="top"s>
            <table align="center" width="100%" height="1400" cellspacing="0" cellpadding="5" border="0" bgcolor="white">
                <tr>
                    <td class="banner" valign="top" style="padding-top: 0px">
                        
                            
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                            <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                        
                        <br/>
                        <center>
                            Powered by <a href="http://www.cnblogs.com">博客园</a>
                        </center>
                    </td>
                </tr>
            </table>
        </td>
        <td valign="top" style="padding: 0">
            <table align="center" width="100%" height="1400" cellspacing="0" cellpadding="5" border="0" bgcolor="white" class="index">
                <tr>
                    <td class="banner" valign="top">
                        <center>
                            
<a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
 <span id="sitehome_link_split">|</span> 

<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/xing-star/">
首页</a>
 <span id="bloghome_link_split">|</span> 


<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
 <span id="newpost_link_split">|</span> 
<!--<asp:HyperLink  Runat="server" CssClass="menu" NavigateUrl="/EnterMyBlog.aspx?NewArticle=1" Text="发新文章" ID="NewArticleLink" /> | -->

<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/xing_star">
联系</a> <span id="contact_link_split">|</span>  

<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/xing-star/rss/">
订阅</a>
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/xing-star/rss/">
    <img src="/skins/autumn/images/xml.gif" alt="订阅" />
</a> <span id="rss_link_split">|</span> 

<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>



                        </center>
                        <div id="post_detail">
    <div class="block">
        <h1 class="block_title">
            
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/xing-star/p/12768379.html">Soul Android app 悬浮view以及帖子中view的联动刷新逆向分析</a>

        </h1>
        <div class="post">
            <div class="postcontent">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>Soul app是我司的竞品，对它的语音音乐播放同步联动的逻辑很感兴趣，于是就开启了一波逆向分析。</p>
<p>下面看代码，以及技术分析，直接步入正轨，哈哈。</p>
<p>我们根据<a href="https://github.com/xingstarx/ActivityTracker">https://github.com/xingstarx/ActivityTracker</a>&nbsp;这个工具，找到某一个页面，比如cn.soulapp.android/.ui.post.detail.PostDetailActivity 这个页面，然后我们用反编译工具AndroidToolPlus反编译soul 的Android apk, 然后搜索下PostDetailActivity这个类。然后找到这个类之后，我们在根据代码经验猜测，这个语音音乐封装的控件可能在哪，肯定是在PostDetailActivity里面或者是他内容的某个成员变量里面，一不小心，我们就找到了PostDetailHeaderProvider。在这个类里面找到了MusicStoryPlayView, AudioPostView这两个view类，他们就是封装好的音频view，音乐view。(就不截图了。有人感兴趣可以按照我说的实践一番就能得到结论了)</p>
<p>关键代码找到了。那就看看他们内部实现吧。</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> MusicStoryPlayView
  </span><span style="color: #0000ff;">extends</span><span style="color: #000000;"> FrameLayout
  </span><span style="color: #0000ff;">implements</span> SoulMusicPlayer.MusicPlayListener</pre>
</div>
<p>类结构上，实现了核心播放器的listener逻辑，那就说明，他的刷新逻辑，都是通过播放器自身的播放状态回调到view自身上，然后view自身实现了对应的刷新机制就可以更改view的状态了</p>
<p>&nbsp;</p>
<p>我们选取几个回调的逻辑看看。不做仔细分析。</p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPause(cn.soulapp.android.lib.common.c.i parami)
  {
    d();
  }
  
  </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPlay(cn.soulapp.android.lib.common.c.i parami)
  {
    LoveBellingManager.e().d();
  }
  
  </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onPrepare(cn.soulapp.android.lib.common.c.i parami)
  {
    </span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.e == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
      </span><span style="color: #0000ff;">return</span><span style="color: #000000;">;
    }
    </span><span style="color: #0000ff;">if</span> (parami.b().equals(<span style="color: #0000ff;">this</span><span style="color: #000000;">.e.songMId)) {
      e();
    }
  }</span></pre>
</div>
<p>&nbsp;</p>
<p>那么我们还得思考一个问题，这个listener是什么时候被添加进来的呢。关键点在于view自身的两个方法</p>
<div class="cnblogs_code">
<pre>  <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onAttachedToWindow()
  {
    </span><span style="color: #0000ff;">super</span><span style="color: #000000;">.onAttachedToWindow();
    SoulMusicPlayer.k().a(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">);
  }
  
  </span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDetachedFromWindow()
  {
    </span><span style="color: #0000ff;">super</span><span style="color: #000000;">.onDetachedFromWindow();
    SoulMusicPlayer.k().b(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">);
  }
  </span></pre>
</div>
<p>所以很明显，在view被添加到window上(也就是在页面上显示出来)的时候，添加入listener里面，从页面消失，就移除出去。</p>
<p>接着我们在看看核心播放器的逻辑里面，是怎么调度的？</p>
<p>根据代码相关联的逻辑，我们很容易找到核心播放器类SoulMusicPlayer</p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> a(cn.soulapp.android.lib.common.c.i parami)
  {
    y0.d().a();
    LoveBellingManager.e().d();
    MusicPlayer.i().f();
    </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (TextUtils.isEmpty(parami.f())) {
      </span><span style="color: #0000ff;">return</span><span style="color: #000000;">;
    }
    Object localObject1 </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.d;
    </span><span style="color: #0000ff;">if</span> (localObject1 != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
      </span><span style="color: #0000ff;">if</span> (!<span style="color: #000000;">((cn.soulapp.android.lib.common.c.i)localObject1).equals(parami))
      {
        i();
      }
      </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
      {
        </span><span style="color: #0000ff;">if</span> (!<span style="color: #000000;">f())
        {
          </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.a.setLooping(parami.g());
          h();
        }
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;">;
      }
    }
    </span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.a == <span style="color: #0000ff;">null</span><span style="color: #000000;">)
    {
      </span><span style="color: #0000ff;">this</span>.a = <span style="color: #0000ff;">new</span><span style="color: #000000;"> IjkMediaPlayer();
      </span><span style="color: #0000ff;">this</span>.a.setOnErrorListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
      </span><span style="color: #0000ff;">this</span>.a.setOnCompletionListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
      </span><span style="color: #0000ff;">this</span>.a.setOnPreparedListener(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
    }
    </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.a.setLooping(parami.g());
    </span><span style="color: #0000ff;">try</span><span style="color: #000000;">
    {
      </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (l0.e(parami.f()))
      {
        SoulApp localSoulApp;
        Object localObject2;
        </span><span style="color: #0000ff;">if</span> (parami.a() != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
        {
          localObject1 </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.a;
          localSoulApp </span>=<span style="color: #000000;"> SoulApp.e();
          localObject2 </span>= <span style="color: #0000ff;">new</span> java/io/<span style="color: #000000;">File;
          ((File)localObject2).</span>&lt;init&gt;<span style="color: #000000;">(parami.f());
          ((IjkMediaPlayer)localObject1).setDataSource(localSoulApp, Uri.fromFile((File)localObject2), parami.a());
        }
        </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
        {
          localObject2 </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.a;
          localSoulApp </span>=<span style="color: #000000;"> SoulApp.e();
          localObject1 </span>= <span style="color: #0000ff;">new</span> java/io/<span style="color: #000000;">File;
          ((File)localObject1).</span>&lt;init&gt;<span style="color: #000000;">(parami.f());
          ((IjkMediaPlayer)localObject2).setDataSource(localSoulApp, Uri.fromFile((File)localObject1));
        }
      }
      </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
      {
        localObject1 </span>=<span style="color: #000000;"> parami.a();
        </span><span style="color: #0000ff;">if</span> (localObject1 != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {
          </span><span style="color: #0000ff;">this</span>.a.setDataSource(SoulApp.e(), Uri.parse(parami.f().replace("https", "http"<span style="color: #000000;">)), parami.a());
        } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {
          </span><span style="color: #0000ff;">this</span>.a.setDataSource(SoulApp.e(), Uri.parse(parami.f().replace("https", "http"<span style="color: #000000;">)));
        }
      }
      </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.a.prepareAsync();
      </span><span style="color: #0000ff;">this</span>.d =<span style="color: #000000;"> parami;
      </span><span style="color: #0000ff;">this</span>.b = <span style="color: #0000ff;">true</span><span style="color: #000000;">;
    }
    </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (IOException parami)
    {
      parami.printStackTrace();
    }
  }
  </span></pre>
</div>
<p>&nbsp;</p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> g()
  {
    </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (f())
    {
      Object localObject </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.a;
      </span><span style="color: #0000ff;">if</span> (localObject != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
      {
        </span><span style="color: #0000ff;">this</span>.b = <span style="color: #0000ff;">false</span><span style="color: #000000;">;
        ((IjkMediaPlayer)localObject).pause();
        localObject </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">.e.iterator();
        </span><span style="color: #0000ff;">while</span><span style="color: #000000;"> (((Iterator)localObject).hasNext()) {
          ((MusicPlayListener)((Iterator)localObject).next()).onPause(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">.d);
        }
        </span><span style="color: #0000ff;">this</span>.c.removeCallbacksAndMessages(<span style="color: #0000ff;">null</span><span style="color: #000000;">);
      }
    }
  }</span></pre>
</div>
<p>仔细观察分析这两个方法体，大致可以猜测出，他们是start逻辑，以及暂停播放的逻辑。可以分析出，核心播放器执行完播放，暂停，停止等逻辑后，都会调用List里面的listener，遍历listener，然后触发对应的回调逻辑。</p>
<p>恩，大体的思路有了，就是这么搞，哈哈。</p>
<p>&nbsp;</p>
<p>那么我用于我自己项目中，是这么用的么，还是有一些细微差异的，整体方案是参考的soul。细微不同之处在于我是将MusicStoryPlayView放在xml里面，不是像soul那样，直接new的。所以MusicStoryPlayView会被添加很多次，比如在列表中有很多个的话，后面需要判断播放的媒体资源，跟MusicStoryPlayView存放的媒体资源的主键是否一致。</p>
<p>此外出了view类，我对于一些特殊的逻辑，比如Activity或者是悬浮view等等，都实现了PlayListener。通过他们可以实现一些棘手的问题。</p>
<p>好了，本篇到此结束，如果大家有疑问，欢迎留言交流。</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="itemdesc">
                发表于 
<span id="post-date">2020-04-24 16:36</span>&nbsp;
<a href="https://www.cnblogs.com/xing-star/">xing_star</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12768379" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12768379);return false;">收藏</a>
            </div>
        </div>
        <div class="seperator">&nbsp;</div>
    </div>
</div>


<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 204156, cb_blogApp = 'xing-star', cb_blogUserGuid = 'e2079057-a42d-e411-b908-9dcfd8948a71';
    var cb_entryId = 12768379, cb_entryCreatedDate = '2020-04-24 16:36', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
</table>


    
</body>
</html>