<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="作者： &amp;quot;HelloGitHub 追梦人物&amp;quot; 文中所涉及的示例代码，已同步更新到 &amp;quot;HelloGitHub Team 仓库&amp;quot; 在 HelloDjango 全栈系" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>初始化 RESTful API 风格的博客系统 - 削微寒 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey.min.css?v=Fx4xdLkGuHnlaG7xntG_wAnZrnorJWp5u_TWKqbvMF0" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/xueweihan/custom.css?v=RRRtuZg9tgADpy&#x2B;UPLStdn026o0=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey-mobile.min.css?v=cYvlxMu_nd6MVfg-vi7YqOC6FaZ7VHFsDM166vO_ekA" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/xueweihan/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/xueweihan/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/xueweihan/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 228315;
        var currentBlogApp = 'xueweihan';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BlackLowKey';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <a href="https://github.com/521xueweihan/HelloGitHub/"><img style="position: absolute; top: 0; right: 0; border: 0" src="https://images.cnblogs.com/cnblogs_com/xueweihan/859919/o_200129100904forkme_right_green_007200.png" alt="Fork me on GitHub" data-canonical-src="https://images.cnblogs.com/cnblogs_com/xueweihan/859919/o_200129100904forkme_right_green_007200.png"></a>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/xueweihan/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/xueweihan/">削微寒的程序员之路</a>
</h1>
<h2>
谦逊、专注，才能成长。
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/xueweihan/">
首页</a>
</li>
<li>


</li>
<li>
</li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/xueweihan/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
322&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
1142</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/xueweihan/p/12761430.html">初始化 RESTful API 风格的博客系统</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p><img src="https://img2020.cnblogs.com/blog/759200/202004/759200-20200415161158343-1662112908.jpg" alt=""></p>
<p>作者：<a href="https://www.zmrenwu.com">HelloGitHub-追梦人物</a></p>
<blockquote>
<p>文中所涉及的示例代码，已同步更新到 <a href="https://github.com/HelloGitHub-Team/HelloDjango-REST-framework-tutorial">HelloGitHub-Team 仓库</a></p>
</blockquote>
<p>在 HelloDjango 全栈系列教程的第一步——<a href="https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/">Django博客教程（第二版）</a>中，我们一步步地开发了一个功能完善的个人博客系统。</p>
<p>接下来，我们将使用 django-rest-framework，一步步为博客系统开发 RESTful API，并在这个过程中深入学习 django-rest-framework 的使用方法，为后续使用 Vue 开发博客应用提供后端 API 的支持（Vue 的开发教程将在 Django REST Framework 教程完结后推出，敬请期待）。</p>
<p>如果你已经跟着第一步的教程 <a href="https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/">Django博客教程（第二版）</a>完成了博客系统的开发，那么可以继续在原来的项目上进行，只需要注意和这个教程中个别细微的差异就可以了。</p>
<p>你也可以 fork 新仓库的项目，新仓库和 <a href="https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/">Django博客教程（第二版）</a>中示例仓库代码几乎完全一样，只是个别地方（例如 Docker 容器名、镜像名等）做了一些修改，以体现本教程的特色。</p>
<p>随便以哪个仓库为基础，你都可以顺畅地跟进本教程。</p>
<p>项目代码准备好以后，先来把本地开发环境搭建起来，过程非常简单，只需要执行几条命令就可以了。这里以 Pipenv 为例，Virtualenv 或者 Docker 的启动方式可以参考项目的 <a href="https://github.com/HelloGitHub-Team/HelloDjango-REST-framework-tutorial">README</a>。</p>
<blockquote>
<p><strong>注意：</strong></p>
<p>因为博客全文搜索功能依赖 Elasticsearch 服务，如果使用 Virtualenv 或者 Pipenv 启动项目而不想搭建 Elasticsearch 服务的话，请先设置环境变量 <code>ENABLE_HAYSTACK_REALTIME_SIGNAL_PROCESSOR=no</code> 以关闭实时索引，否则无法创建博客文章。如果关闭实时索引，全文搜索功能将不可用。</p>
<p>Windows 设置环境变量的方式：<code>set ENABLE_HAYSTACK_REALTIME_SIGNAL_PROCESSOR=no</code></p>
<p>Linux 或者 macOS：<code>export ENABLE_HAYSTACK_REALTIME_SIGNAL_PROCESSOR=no</code></p>
<p>使用 Docker 启动则无需设置，因为会自动启动一个包含 Elasticsearch 服务的 Docker 容器。</p>
</blockquote>
<p><strong>第一步</strong>，进入项目的根目录，安装项目启动所需依赖。关于虚拟环境的管理，如果不熟悉的话可以参考：</p>
<pre><code class="language-bash"># --dev 参数会指导 pipenv 同时安装线上运行时的依赖以及开发时所需的依赖
$ pipenv install --dev
</code></pre>
<p><strong>第二步</strong>，生成数据库文件。</p>
<pre><code class="language-bash">$ pipenv run python manage.py migrate
</code></pre>
<p><strong>第三步</strong>，创建后台管理员账户。</p>
<pre><code class="language-bash">$ pipenv run python manage.py createsuperuser
</code></pre>
<p>具体请参阅 <a href="https://www.zmrenwu.com/courses/hellodjango-blog-tutorial/materials/65/">创作后台开启，请开始你的表演</a>。</p>
<p><strong>第四步</strong>，运行开发服务器。</p>
<pre><code class="language-bash">$ pipenv run python manage.py runserver
</code></pre>
<p>浏览器访问 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> 可进入博客首页，<a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a> 为博客后台，可以使用 <strong>第三步</strong> 创建的超级管理员账户登录。</p>
<p><strong>第五步</strong>，为了方便开发和测试，运行脚本生成一些虚拟的测试数据。</p>
<pre><code class="language-bash">$ pipenv run python -m scripts.fake
</code></pre>
<p>这样，基础项目就启动成功了~</p>
<p>接下来就可以开始进行 RESTful API 的开发了。既然要使用 django-rest-framework，第一件事当然是先安装它。进入到项目根目录，运行：</p>
<pre><code class="language-bash">$ pipenv install djangorestframework django-filter
</code></pre>
<p>django-filter 这个库用来提供 API 查询结果过滤的功能，我们后面会讲到怎么用。</p>
<p>将 django-rest-framework 添加到 <code>INSTALLED_APPS</code> 里：</p>
<pre><code class="language-python">blogproject/settings/common.py

INSTALLED_APPS = [
    ...
    'rest_framework',
]
</code></pre>
<p>django-rest-framework 还为我们提供了一个与 API 进行交互的后台，有时候 API 可能需要登录认证，因此将 django-rest-framework 提供 API 交互后台和登录认证 URL 添加进来：</p>
<pre><code class="language-python">blogproject/urls.py

from rest_framework import routers

router = routers.DefaultRouter()
urlpatterns = [
    ...
    path(&quot;api/&quot;, include(router.urls)),
    path(&quot;api/auth/&quot;, include(&quot;rest_framework.urls&quot;, namespace=&quot;rest_framework&quot;)),
]
</code></pre>
<p>这里我们用到了 django-rest-framework 的 Router，它能帮我们自动注册视图函数到指定的 URL 路径。<code>DefaultRouter</code> 类默认会帮我们生成一个API 交互后台的根视图，直接访问  <a href="http://127.0.0.1:8000/api/">http://127.0.0.1:8000/api/</a> 就可以进入 API 交互后台。</p>
<p><img src="https://img2020.cnblogs.com/blog/759200/202004/759200-20200423160254337-1603809986.png" alt=""></p>
<p>这个页面会列出所有可用的 API，因为现在没有开发任何 API，所以列表为空。</p>
<p>点击右上角的 Log in 可进行认证登录，登录后就能和需要认证登录才能访问的 API 进行交互。</p>
<p>这个 API 交互后台是我们开发调试的利器，我们以后还会不断接触，到时候大家就能体会到他的作用了。</p>
<p>至此，django-rest-framework 的安装和基本设置已经完成，接下来就来开始开发博客 API 了。</p>
<hr>
<p><img src="https://img2018.cnblogs.com/blog/759200/202002/759200-20200213201956024-782757549.png" alt=""></p>
<p><strong>关注公众号加入交流群</strong></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 08:48</span>&nbsp;
<a href="https://www.cnblogs.com/xueweihan/">削微寒</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12761430" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12761430);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 228315, cb_blogApp = 'xueweihan', cb_blogUserGuid = '41673165-d8fd-e411-b908-9dcfd8948a71';
    var cb_entryId = 12761430, cb_entryCreatedDate = '2020-04-24 08:48', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 削微寒
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>