<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="原型链继承的问题 如果单独只使用原型链继承主要有以下两个问题。 1）包含引用类型值的原型属性会被所有的实例共享 下面中父类有一个 colors 属性是一个引用类型，每个子类实例对它的修改，其它子类的实" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>原型链继承的问题及解决方法 - codingOrange - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/anothereon001/bundle-anothereon001.min.css?v=vmUk-3Bh8LDsKXwjNHs2GDiFna-ZMTUgOJzjUaXTlPA" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/zhangguicheng/custom.css?v=sqAAp0V1zQBIUS9DFa5wqyUfEFw=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/anothereon001/bundle-anothereon001-mobile.min.css?v=cJiDsI1JAuHHd-OAUWJeyE5JMXXsG4mmuUi2rVmEK1c" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/zhangguicheng/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/zhangguicheng/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/zhangguicheng/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 564539;
        var currentBlogApp = 'zhangguicheng';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'AnotherEon001';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <!-- 添加博客顶部博主信息-->
<p
   style="text-align: center;font-size:35px;margin-bottom:5px;margin-top:20px;opacity: 0.5"
>
  <a 
     href="https://www.cnblogs.com/zhangguicheng/"
     style="color: #222;"
  >
    codingOrange
  </a>
</p>

<!-- 添加顶部滚动信息（公告）例子：《沁园春.雪》-->
<div
    id="Scroll_info"
    style="text-align: center;color:#222;font-size:13px;padding:5px;opacity: 0.5"
>
  b站前端学习直播链接 http://live.bilibili.com/21943972
</div>
<script>
  function func(){
    var tag = document.getElementById('Scroll_info');
    var content = tag.innerText;
    var f = content.charAt(0);
    var l = content.substring(1,content.length);
    var new_content = l + f;
    tag.innerText = new_content;
  }
  setInterval('func()',1600);
</script>

<!-- 创建新的导航栏，内容可更改为你自己的-->
<div id="shwtop" >
  <ul style="margin-left:0px;margin-right: 0px;" class="test11" >
    <div class="dropdown">
      <a href="https://www.cnblogs.com/" class="dropbtn">博客园首页</span></a>
      <div class="dropdown-content">

      </div>
    </div>

    <div class="dropdown">
      <a href="http://www.cnblogs.com/zhangguicheng/" class="dropbtn">我的首页</span></a>
      <div class="dropdown-content">
      </div>
    </div>


    <div class="dropdown">
      <a href="#" class="dropbtn">前端</a>
      <div class="dropdown-content">
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/HTML/"  >HTML</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/CSS/"  >CSS</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/JavaScript/"  >JavaScript</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/TypeScript/"  >TypeScript</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/jQuery/"  >jQuery</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/React/"  >React</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/Vue/"  >Vue</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/ES6/"  >ES6</a>
        <a class="menuhttps://www.cnblogs.com/zhangguicheng/tag/HTML/Webpack/"  >Webpack</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/前端性能优化/"  >前端性能优化</a>
      </div>
    </div>


    <div class="dropdown">
      <a href="#" class="dropbtn">后端</a>
      <div class="dropdown-content">
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/Node/"  target="_Blank">Node</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/MySQL/"  target="_Blank">MySQL</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/Nginx/"  target="_Blank">Nginx</a>
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/Redis/"  target="_Blank">Redis</a>
      </div>
    </div>


<!--    <div class="dropdown">-->
<!--      <a href="#" class="dropbtn">人工智能</a>-->
<!--      <div class="dropdown-content">-->
<!--        <a class="menu" href="https://www.w3cschool.cn/tensorflowjs/"  target="_Blank">TensorFlow.js</a>-->
<!--      </div>-->
<!--    </div>-->


    <div class="dropdown">
      <a href="#" class="dropbtn">学习资源</a>
      <div class="dropdown-content">
        <a class="menu" href="https://developer.mozilla.org/zh-CN/"  target="_Blank">MDN Web 文档</a>
        <a class="menu" href="https://www.w3school.com.cn/"  target="_Blank">W3school 在线教程</a>
        <a class="menu" href="https://stackoverflow.com/questions"  target="_Blank">Stack Overflow</a>
        <a class="menu" href="http://ife.baidu.com/"  target="_Blank">百度前端技术学院</a>
        <a class="menu" href="http://ife.baidu.com/"  target="_Blank">React官网</a>
      </div>
    </div>


<!--    <div class="dropdown">-->
<!--      <a href="#" class="dropbtn">项目实战</a>-->
<!--      <div class="dropdown-content">-->
<!--        <a class="menu" href="/"  target="_Blank">寒假的时候整理一下</a>-->
<!--      </div>-->
<!--    </div>-->


    <div class="dropdown">
      <a href="#" class="dropbtn">前端杂货铺</a>
      <div class="dropdown-content">
        <a class="menu" href="https://tool.lu/"  target="_Blank">在线工具集</a>
      </div>
    </div>

    <div class="dropdown">
      <a href="#" class="dropbtn">程序员加油站</a>
      <div class="dropdown-content">
        <a class="menu" href="https://www.cnblogs.com/zhangguicheng/tag/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"  target="_Blank">正则表达式</a>
      </div>
    </div>


    <div class="dropdown">
      <a href="#" class="dropbtn">求职面经</a>
      <div class="dropdown-content">
        <a class="menu" href="https://www.nowcoder.com/recommend"  target="_Blank">牛客网</a>
        <a class="menu" href="https://www.zhipin.com/nanjing/"  target="_Blank">BOSS 直聘</a>
        <a class="menu" href="https://maimai.cn/"  target="_Blank">脉脉(扩展你的人脉)</a>
      </div>
    </div>


    <div class="dropdown">
      <a href="#" class="dropbtn">休闲娱乐</a>
      <div class="dropdown-content">
        <a class="menu" href="http://music.163.com/"  target="_Blank">网易云音乐</a>
        <a class="menu" href="http://music.qq.com/"  target="_Blank">QQ音乐</a>
        <a class="menu" href="https://www.bilibili.com/"  target="_Blank">bilibili</a>
        <a class="menu" href="http://china.nba.com/"  target="_Blank">NBA</a>
        <a class="menu" href="https://www.toutiao.com/"  target="_Blank">今日头条</a>
      </div>
    </div>
  </ul>
</div>

<!-- 指定返回顶部位置#shwtop -->
<a href="#shwtop"><div id="toTop" style="zoom:0;"></div></a>

<!-- 博客页面脚添加Github链接或其他链接 -->
<!-- 页面左上角 -->

<!-- 页面右上角 -->
<a href="https://github.com/happyCoding1024" title="我的github地址" target="_Blank" class="github-corner" aria-label="View source on Github"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#999; color:#eee; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>


    </div>
    <div id="wrapper">
<div id="header">

<div id="top">
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/zhangguicheng/">codingOrange</a>
</h1>
<div id="subtitle">

</div>
</div>
<div id="sub"><div class="BlogStats">随笔 - 
39, 文章 - 
10, 评论 - 
14, 引用 - 
0</div>

</div>




</div>
<div id="main_container">
<div id="main_content">
<div id="content">
	<div id="post_detail">
    <div class="post">
        <h2>
            
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/zhangguicheng/p/12768743.html">原型链继承的问题及解决方法</a>

        </h2>
        <div class="postbody">
            
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h2 id="原型链继承的问题">原型链继承的问题</h2>
<p>如果单独只使用原型链继承主要有以下两个问题。</p>
<p><strong>1）包含引用类型值的原型属性会被所有的实例共享</strong></p>
<p>下面中父类有一个 colors 属性是一个引用类型，每个子类实例对它的修改，其它子类的实例会跟着修改。</p>
<pre><code class="language-js">// 定义父类
function SuperClass () {
  this.colors = ['red, black']
}
// 定义子类
function SubClass () {
}
// 将父类的实例作为子类的原型对象
SubClass.prototype = new SuperClass()
// 声明子类的一个实例o1
o1 = new SubClass()
// 声明子类的另一个实例o2
o2 = new SubClass()
// 在 o1 中改变 colors 的值
// 注意不能这样去 o1.colors = ['red', 'yellow'] 修改数组的值，如果这样修改了，o1.colors就不再指向SuperClass中的colors了，而是指向了一个全新的数组。
// 要在原有数组上修改要使用数组提供的API，而不是新建一个数组再进行赋值
o1.splice(1, 1, 'yellow');
console.log(o1.colors) // ['red', 'yellow']
// 这样修改后 o2 实例也会被修改
console.log(o2.colors) // ['red', 'yellow']
</code></pre>
<p><strong>2）无法在不影响其它实例的前提下向父类传递参数</strong></p>
<p>在只使用原型链的前提下传递参数，主要就是就是在将创建的父类对象赋给子类的原型对象时，将参数传递进去<code>SubClass.prototype = new SuperClass(['red'])</code> ，这种方式没有办法做到给每个子类的实例单独设置各自的属性。</p>
<pre><code class="language-js">// 定义父类
function SuperClass (color) {
  this.color=color
}
// 定义子类
function SubClass () {
}

// 将父类的实例作为子类的原型对象
SubClass.prototype = new SuperClass(['red'])
// 创建实例对象o1并传递参数
var o1 = new SubClass()
// 创建实例对象o2并传递参数
var o2 = new SubClass()
// 打印o1和o2的color
console.log(o1.color)
console.log(o2.__proto__.color)
</code></pre>
<p>可见，每个实例并不能够传递各自的参数。</p>
<h2 id="借用构造函数">借用构造函数</h2>
<p>上面的每个实例是不能传递各自的参数的，如果我们让每个实例在自己作用域下调用父类的构造函数声明出来的属性就是各个实例中的了，每个实例都各自有自己的属性。</p>
<p>按照这个思路在子类的构造函数中中使用 <code>SuperClass.call(this, color)</code>  在子类实例的作用域下调用父类的构造函数，这样每个创建出来的子类的实例就都有自己的属性了。</p>
<pre><code class="language-js">// 定义父类
function SuperClass (color) {
  this.color=color;
  this.say = function () {
    alert('hello');
  }
}
// 定义子类
function SubClass (color) {
  SuperClass.call(this, color)
}

// 创建实例对象o1并传递参数
var o1 = new SubClass(['red'])
// 创建实例对象o2并传递参数
var o2 = new SubClass(['yellow'])
// 打印o1和o2的color
console.log(o1.color) // ['red']
console.log(o2.color) // ['yellow']
</code></pre>
<p>可以看到每个实例都可以设置各自的属性。</p>
<p>我们知道实例的属性每个实例应该有各自的，但是父类的方法每个实例应该是能够共享的。但是上面这样写，父类的方法 say 在每个子类的实例都有，对于方法来说没有必要（子类的实例不会去更改方法，而且每个子类的实例都有这个方法会耗费内存），应该让每个子类的实例共享父类的方法。</p>
<p>在分析仅使用原型链时，其中第一个弊端就是父类的所有属性和方法都被子类的所有实例共享。那么在上面既然我们借用构造函数解决了实例属性共享的问题，方法的共享何不用原型链来解决呢？</p>
<p>接下来就出现了广泛使用的组合模式。</p>
<h2 id="组合模式">组合模式</h2>
<p>之前在父类中直接定义方法，这样子类的实例无法共享父类的方法。现在将父类的方法定义在父类的 prototype 中（9行），然后将父类的实例对象赋给子类的原型对象（19行），这样就可以在子类的实例中共享父类的方法了。</p>
<pre><code class="language-js">// 定义父类
function SuperClass (color) {
  this.color=color;
-  this.say = function () {
-   alert('hello');
-  }
}
// 定义父类的方法
+ SuperClass.prototype.say = function () {
+   alert('hello');
+ }
  
// 定义子类
function SubClass (color) {
  SuperClass.call(this, color)
}
  
// 继承父类的方法
+ SubClass.protype = new SuperClass()

// 创建实例对象o1并传递参数
var o1 = new SubClass(['red'])
// 创建实例对象o2并传递参数
var o2 = new SubClass(['yellow'])
// 打印o1和o2的color
console.log(o1.color) // ['red']
console.log(o2.color) // ['yellow']
o1.say()
</code></pre>
<p>ES6 中利用 class 的方法实际上就是利用了组合模式，接下来用 ES6 中的 class 重写上面的代码。</p>
<pre><code class="language-js">class SuperClass {
  constructor (color) {
    this.color = color;
  }

  say () {
    alert('hello')
  }
}

class SubClass extends SuperClass {
  constructor (color) {
    super(color)
  }
}

const o1 = new SubClass(['red'])
console.log(o1.color) // ['red']
o1.say() 
</code></pre>
<p>可以看到两者的结果是一致的。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
        </div>
        <p class="postfoot">
            posted on 
<span id="post-date">2020-04-24 17:11</span>&nbsp;
<a href="https://www.cnblogs.com/zhangguicheng/">codingOrange</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12768743" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12768743);return false;">收藏</a>
        </p>
    </div>
</div>

<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 564539, cb_blogApp = 'zhangguicheng', cb_blogUserGuid = '4f354f48-038f-41fb-f368-08d6d1bc5bde';
    var cb_entryId = 12768743, cb_entryCreatedDate = '2020-04-24 17:11', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

</div>
</div>
<div id="leftmenu">


<h3>导航</h3>
<ul>
    <li>
        

    </li>
    <li>
        


    </li>
    <li>
        



    </li>
    <li>
        

    </li>
    <li>
        

        

    </li>
    <li>
        
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>

    </li>
</ul>


<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>

<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>

</div>
</div>
<div class="clear"></div>
<div id="footer">
<p id="footer">
	Powered by: 
	<br />
	
	
<a href="https://www.cnblogs.com/" id="Footer1_Hyperlink3" style="font-size: 12px; font-family: Verdana">博客园</a>
	<br />
	Copyright &copy; 2020 codingOrange
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

</p>


</div>
</div>


    <div id="page_end_html">
        <!-- 生成博客目录的JS代码，两级目录 -->
<script type="text/javascript">
  /*
      这段代码按H2、H3格式生成两级菜单
      写博客按H2、H3格式写，不然生成不了
      Markdown写作按##、###两级目录写
      当然你也可以改写代码成三级菜单
      参考：孤傲苍狼    zhang_derek
      洪卫    2018-5-18
  */
  var BlogDirectory = {
    /* 获取元素位置，距浏览器左边界的距离（left）和距浏览器上边界的距离（top）*/
    getElementPosition:function (ele) {
      var topPosition = 0;
      var leftPosition = 0;
      while (ele){
        topPosition += ele.offsetTop;
        leftPosition += ele.offsetLeft;
        ele = ele.offsetParent;
      }
      return {top:topPosition, left:leftPosition};
    },
    /*获取滚动条当前位置 */
    getScrollBarPosition:function () {
      var scrollBarPosition = document.body.scrollTop || document.documentElement.scrollTop;
      return  scrollBarPosition;
    },
    /* 移动滚动条，finalPos 为目的位置，internal 为移动速度 */
    moveScrollBar:function(finalpos, interval) {
      //若不支持此方法，则退出
      if(!window.scrollTo) {
        return false;
      }

      //窗体滚动时，禁用鼠标滚轮
      window.onmousewheel = function(){
        return false;
      };

      //清除计时
      if (document.body.movement) {
        clearTimeout(document.body.movement);
      }

      //获取滚动条当前位置
      var currentpos =BlogDirectory.getScrollBarPosition();

      var dist = 0;
      //到达预定位置，则解禁鼠标滚轮，并退出
      if (currentpos == finalpos) {
        window.onmousewheel = function(){
          return true;
        }
        return true;
      }
      //未到达，则计算下一步所要移动的距离
      if (currentpos < finalpos) {
        dist = Math.ceil((finalpos - currentpos)/10);
        currentpos += dist;
      }
      if (currentpos > finalpos) {
        dist = Math.ceil((currentpos - finalpos)/10);
        currentpos -= dist;
      }

      var scrTop = BlogDirectory.getScrollBarPosition();//获取滚动条当前位置
      window.scrollTo(0, currentpos);//移动窗口
      if(BlogDirectory.getScrollBarPosition() == scrTop)//若已到底部，则解禁鼠标滚轮，并退出
      {
        window.onmousewheel = function(){
          return true;
        }
        return true;
      }

      //进行下一步移动
      var repeat = "BlogDirectory.moveScrollBar(" + finalpos + "," + interval + ")";
      document.body.movement = setTimeout(repeat, interval);
    },

    htmlDecode:function (text){
      var temp = document.createElement("div");
      temp.innerHTML = text;
      var output = temp.innerText || temp.textContent;
      temp = null;
      return output;
    },

    /*
    创建博客目录，id表示包含博文正文的 div 容器的 id，
    mt 和 st 分别表示主标题和次级标题的标签名称（如 H2、H3，大写或小写都可以！），
    interval 表示移动的速度
    */
    createBlogDirectory:function (id, mt, st, interval){
      //获取博文正文div容器
      var elem = document.getElementById(id);
      if(!elem) return false;
      //获取div中所有元素结点
      var nodes = elem.getElementsByTagName("*");
      //创建博客目录的div容器
      var divSideBar = document.createElement('DIV');
      divSideBar.className = 'uprightsideBar';
      divSideBar.setAttribute('id', 'uprightsideBar');
      var divSideBarTab = document.createElement('DIV');
      divSideBarTab.setAttribute('id', 'sideBarTab');
      divSideBar.appendChild(divSideBarTab);
      var h2 = document.createElement('H2');
      divSideBarTab.appendChild(h2);
      var txt = document.createTextNode('目录导航');
      h2.appendChild(txt);
      var divSideBarContents = document.createElement('DIV');
      divSideBarContents.style.display = 'none';
      divSideBarContents.setAttribute('id', 'sideBarContents');
      divSideBar.appendChild(divSideBarContents);
      //创建自定义列表
      var dlist = document.createElement("dl");
      divSideBarContents.appendChild(dlist);
      var num = 0;//统计找到的mt和st
      mt = mt.toUpperCase();//转化成大写
      st = st.toUpperCase();//转化成大写
      //遍历所有元素结点
      for(var i=0; i<nodes.length; i++)
      {
        if(nodes[i].nodeName == mt|| nodes[i].nodeName == st)
        {
          //获取标题文本
          var nodetext = nodes[i].innerHTML.replace(/<\/?[^>]+>/g,"");//innerHTML里面的内容可能有HTML标签，所以用正则表达式去除HTML的标签
          nodetext = nodetext.replace(/ /ig, "");//替换掉所有的
          nodetext = BlogDirectory.htmlDecode(nodetext);
          //插入锚
          nodes[i].setAttribute("id", "blogTitle" + num);
          var item;
          switch(nodes[i].nodeName)
          {
            case mt:    //若为主标题
              item = document.createElement("dt");
              break;
            case st:    //若为子标题
              item = document.createElement("dd");
              break;
          }

          //创建锚链接
          var itemtext = document.createTextNode(nodetext);
          item.appendChild(itemtext);
          item.setAttribute("name", num);
          //添加鼠标点击触发函数
          item.onclick = function(){
            var pos = BlogDirectory.getElementPosition(document.getElementById("blogTitle" + this.getAttribute("name")));
            if(!BlogDirectory.moveScrollBar(pos.top, interval)) return false;
          };
          //将自定义表项加入自定义列表中
          dlist.appendChild(item);
          num++;
        }
      }

      if(num == 0) return false;
      /* 鼠标进入时的事件处理 */
      divSideBarTab.onmouseenter = function(){
        divSideBarContents.style.display = 'block';
      }
      /* 鼠标离开时的事件处理 */
      divSideBar.onmouseleave = function() {
        divSideBarContents.style.display = 'none';
      }

      document.body.appendChild(divSideBar);
    }

  };

  window.onload=function(){
    /* 页面加载完成之后生成博客目录 */
    BlogDirectory.createBlogDirectory("cnblogs_post_body","h2","h3",20);

    //为右下角推荐推荐区域添加关注按钮
    $('#div_digg').prepend('<div style="padding-bottom: 5px"><span class="icon_favorite" style="padding-top: 2px"></span><a onclick="follow(\'4f354f48-038f-41fb-f368-08d6d1bc5bde\');" href="javascript:void(0);" style="font-weight: bold; padding-left:5px;">关注博主</a></div>');
  }
</script>
    </div>
</body>
</html>