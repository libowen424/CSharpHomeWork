<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>句幽 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/uoyo/custom.css?v=TZbXpieXQG/10X3L0iBgILcLZKA=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/uoyo/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/uoyo/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/uoyo/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 401017;
        var currentBlogApp = 'uoyo';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/uoyo/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/uoyo/">句幽</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/uoyo/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%8F%A5%E5%B9%BD">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/uoyo/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
27&nbsp; </span>
<span id="stats_article_count">文章 - 
1&nbsp; </span>
<span id="stats-comment_count">评论 - 
406</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<!--done-->




		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/01/08.html">2020年1月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12167224.html">
[置顶]    《如何运用领域驱动设计》汇总
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：这是关于领域驱动设计的一个系列博文，目的是在学习之后能够使用领域驱动设计的知识来开发应用。领域驱动设计是目前比较火的概念，其实早在2004年的时候 **Eric Evans** 就提出了领域驱动设计。但是直到后期才被大家所认识，特别是随着现在微服务的兴起，许许多多的人意识到了领域驱动设计的好处，认为它是指导微服务设计的一把利器。            <a href="https://www.cnblogs.com/uoyo/p/12167224.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-01-08 16:13 句幽 阅读 (1294) 评论 (11)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12167224" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/04/24.html">2020年4月24日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12767960.html">
    【5min+】为你的.NET应用进行一次全方位体检
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：发现网上很少有讲解关于.NET Core的单元测试文章，代码覆盖率的文章就更少了，所以就抽时间梳理了一篇。通过本篇文章您将Get：1： 为.NET Core应用添加单元测试 2： 为.NET Core应用进行代码覆盖率度量 3：使用Azure Devops进行自动化构建 4：收获类似于下面的这些徽章：            <a href="https://www.cnblogs.com/uoyo/p/12767960.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-04-24 15:52 句幽 阅读 (284) 评论 (5)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12767960" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/03/27.html">2020年3月27日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12583149.html">
    【5min+】更好的选项实践。.Net Core中的IOptions
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：.NET Core为咱们提供的默认依赖注入方式相对来说功能已经很完善了。某些情况下，您会发现，当我们的业务类被添加到依赖注入容器中时，该类构造函数中所依赖的其它类都得一同添加到容器。可是，我的一些依赖类为选型类型怎么办呢？对于这种选项类型，微软给出了专门的处理手段：Microsoft.Extensions.Options包。我们只需要使用该包为IServiceCollection提供的扩展方法AddOptions            <a href="https://www.cnblogs.com/uoyo/p/12583149.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-03-27 18:14 句幽 阅读 (2039) 评论 (8)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12583149" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/03/17.html">2020年3月17日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12509871.html">
    【5min+】 一个令牌走天下！.Net Core中的ChangeToken
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：ChangeToken这个东西好像已经不止看到它一次两次了，在Microsoft.Extensions.FileProviders包里面也有发现它的身影。迷惑了很久之后，今天总算可以找个机会来扒一扒它，看看它到底是一个什么东西。其实，从MSDN里面的第一句描述以及这个类的命名，咱们还是可以读懂它的大致意思的。这不就是一个像观察者模式的东西吗？ 当某某某发生变化的时候，就执行一个某某操作。            <a href="https://www.cnblogs.com/uoyo/p/12509871.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-03-17 12:34 句幽 阅读 (3134) 评论 (7)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12509871" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/03/09.html">2020年3月9日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12450205.html">
    【5min+】AspNet Core中的全局异常处理
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：其实一说到AspNet Core里面的全局异常，其实大家都不会陌生。因为这玩意儿用的非常频繁，好的异常处理方案能够帮助开发者更快速的定位问题，也能够给用户更好的用户体验。那么在AspNet Core中我们该如何捕获和处理异常呢？ 可能很多同学都知道：IExceptionFilter。            <a href="https://www.cnblogs.com/uoyo/p/12450205.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-03-09 18:21 句幽 阅读 (541) 评论 (11)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12450205" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/03/05.html">2020年3月5日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12421553.html">
    如何运用领域驱动设计 - 领域事件
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：在实践领域驱动设计（DDD）的过程中，我们往往会遇到多个领域对象相互交互的情况。比如聚合根A在执行某操作之前需要得到聚合根B的某个信号（或某些数据）。如果在单体应用程序中，我们有条件和机会使得两者进行强引用来完成操作，但是这将直接打破领域驱动设计的规范，从而使得项目不可控，再次回到大泥球的开发。现在，咱们可以选取一种更纯净的方式来解决这类问题，并且还能够更清晰的描述领域对象的活动迹象。这就是咱们今天的主题 ———— 领域事件            <a href="https://www.cnblogs.com/uoyo/p/12421553.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-03-05 17:47 句幽 阅读 (1762) 评论 (21)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12421553" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/03/03.html">2020年3月3日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12401366.html">
    使用Taiko + Gauge进行自动化测试（一）
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：taiko是一个免费的开源浏览器自动化工具，由ThoughtWorks开发。它是一个node的库，Taiko使用Chrome Devtools API，它是为测试现代web应用程序而构建的。            <a href="https://www.cnblogs.com/uoyo/p/12401366.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-03-03 11:41 句幽 阅读 (388) 评论 (2)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12401366" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/03/02.html">2020年3月2日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12396644.html">
    【5min+】保持程序健康的秘诀！AspNetCore的HealthCheck
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：在开发AspNet Core应用的时候，我们经常会为该应用公布一个特殊的检测接口出来。该接口的目的很简单，告诉某一些外界程序（比如docker，客户端等）这个程序现在是可以访问或者不能访问的，便于外界做出相应的操作，比如监控报警，页面通知用户稍作等待等。在Aspnet Core 2.2 之后，我们有了新的解决方式。只需要简单的操作就可以进行程序运行状况的检查。            <a href="https://www.cnblogs.com/uoyo/p/12396644.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-03-02 17:08 句幽 阅读 (1577) 评论 (7)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12396644" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/02/28.html">2020年2月28日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12377645.html">
    【5min+】后台任务的积木。.NetCore中的IHostedService
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：咱们开发应用的时候，有时候可能需要建立一些独立于应用逻辑体本身的后台任务。在.NET Core 2.0 之后，官方为我们提供了一个叫做 `IHostedService` 的接口，它可以便于我们更好的实现托管服务。那么今天咱们就来扒一扒 `IHostedService` 到底是一个怎样的东西，我们可以在什么情况下使用它。            <a href="https://www.cnblogs.com/uoyo/p/12377645.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-02-28 16:07 句幽 阅读 (2097) 评论 (11)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12377645" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/02/24.html">2020年2月24日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12357999.html">
    【5min+】 设计模式的迷惑？Provider vs Factory
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：一说起设计模式，大家应该都不会太陌生。毕竟在面向对象的世界中，我们需要用到各种奇技淫巧的手段来构建我们的应用，而设计模式就是这些技巧的根本。既然都是向外界提供一个结果，那么Provider和Factory到底有什么不同呢？            <a href="https://www.cnblogs.com/uoyo/p/12357999.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-02-24 17:59 句幽 阅读 (1753) 评论 (12)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12357999" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/uoyo/archive/2020/02/21.html">2020年2月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12342290.html">
    【5min+】 对象映射只有AutoMapper？试试Mapster
</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：一谈到如何在.Net中进行对象映射，可能大部分同学都会脱口而出：“使用AutoMapper！”。 是的，AutoMapper 是一个非常成熟的对象映射器。截至到写这篇文章，您能在Nuget上下载到的AutoMapper包的版本为：v9.0.0，而对应的 Github 的 star 已经高达7K。然后再来看一看，咱们今天要介绍的主角：Mapster。 不知道有多少同学听过它？应该很少吧，这一点从百度搜索也可以看出来            <a href="https://www.cnblogs.com/uoyo/p/12342290.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">

posted @ 2020-02-21 17:42 句幽 阅读 (2537) 评论 (14)
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12342290" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/uoyo/default.html?page=2">
        下一页
    </a>

    </div>    
</div>








	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 句幽
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <div class="Snow">
    <canvas id="Snow"></canvas>
</div>

<!--下雪特效-->
<script src="https://blog-static.cnblogs.com/files/uoyo/snoweffects.js"></script>

<script type="text/javascript" language="javascript"> 
//为右下角推荐推荐区域添加关注按钮
window.onload = function () {
    $('#div_digg').prepend('<div style="padding-bottom: 5px" id="please_follow"><span class="icon_favorite" style="padding-top: 2px"></span><a onclick="follow(\'4660842a-34b1-4866-476c-08d52fc34315\');" href="javascript:void(0);" style="font-weight: bold; padding-left:5px;font-size: 14px; vertical-align: super;color: #ff5d47;">关注一下楼主吧</a> </div>');
}
</script>

<!--代码复制-->
<script src="https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.min.js"></script>

<!--主题-->
<script src="https://blog-static.cnblogs.com/files/uoyo/gshang.2019.10.27.1.js"></script>

<!-- zoom.js 的样式 -->
<link rel="stylesheet" type="text/css" href="https://blog-static.cnblogs.com/files/uoyo/zoom.css">
<!-- Bootstrap 的 transition.js cdn（过渡动画插件）-->
<script src="https://cdn.bootcss.com/bootstrap/3.2.0/js/transition.js"></script>
<!-- zoom.js 核心代码 -->
<script src="https://blog-static.cnblogs.com/files/uoyo/zoom.js"></script>
<script type='text/javascript'>$('#cnblogs_post_body img').attr('data-action', 'zoom');</script>
    </div>
</body>
</html>