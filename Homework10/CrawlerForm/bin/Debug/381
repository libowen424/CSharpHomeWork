<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="讲故事 最近重温了一下星爷的《唐伯虎点秋香》，依然让我捧腹不已，幻想着要是我也能有一名秋香如此的侍女，夫复何求呀，带着这个美好的幻想沉沉睡去... 突然想到，我是一名程序猿呀，想要什么对象不是易如反掌" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>设计模式-原型模式（Prototype）【重点：浅复制与深复制】 - 稻草堆上打着滚儿 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/sayook/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/sayook/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/sayook/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 383968;
        var currentBlogApp = 'sayook';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/sayook/">稻草堆上打着滚儿</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/sayook/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%A8%BB%E8%8D%89%E5%A0%86%E4%B8%8A%E6%89%93%E7%9D%80%E6%BB%9A%E5%84%BF">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/sayook/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
8&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
6</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/sayook/p/12766018.html">设计模式-原型模式（Prototype）【重点：浅复制与深复制】</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h4 id="讲故事">讲故事</h4>
<p>最近重温了一下星爷的《唐伯虎点秋香》，依然让我捧腹不已，幻想着要是我也能有一名秋香如此的侍女，夫复何求呀，带着这个美好的幻想沉沉睡去...</p>
<p>突然想到，我是一名程序猿呀，想要什么对象不是易如反掌吗，New一个呗，不光是秋香，春、夏、冬都要，身材要超A的，百度好三围（82, 54, 86），开干...</p>
<h4 id="coding">Coding</h4>
<blockquote>
<p><strong>Beauty</strong>类，包含美人的属性</p>
<pre><code>    public class Beauty
    {
        public Beauty(int bust, int theWaist, int hipline)
        {
            Bust = bust;
            TheWaist = theWaist;
            Hipline = hipline;
            //模拟产生一名美人的时长
            Thread.Sleep(3000);
        }

        /// &lt;summary&gt;
        /// 名称
        /// &lt;/summary&gt;
        public string Name { get; set; }

        /// &lt;summary&gt;
        /// 才艺
        /// &lt;/summary&gt;
        public string Talent { get; set; }

        /// &lt;summary&gt;
        /// 胸围
        /// &lt;/summary&gt;
        public int Bust { get; set; }

        /// &lt;summary&gt;
        /// 腰围
        /// &lt;/summary&gt;
        public int TheWaist { get; set; }

        /// &lt;summary&gt;
        /// 臀围
        /// &lt;/summary&gt;
        public int Hipline { get; set; }

        /// &lt;summary&gt;
        /// 起名
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;name&quot;&gt;&lt;/param&gt;
        public void SetName(string name)
        {
            Name = name;
        }

        /// &lt;summary&gt;
        /// 设置才艺
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;talent&quot;&gt;&lt;/param&gt;
        public void SetTalent(string talent)
        {
            Talent = talent;
        }
    }
</code></pre>
</blockquote>
<p>客户端生产美女</p>
<pre><code>    internal class Program
    {
        private static void Main(string[] args)
        {
            var sw = new Stopwatch();
            sw.Start();
            var beauty1 = new Beauty(82, 54, 86);
            sw.Stop();
            Console.WriteLine($&quot;生产第一名美人耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty1.SetName(&quot;秋香&quot;);
            beauty1.SetTalent(&quot;弹琴&quot;);

            sw.Restart();
            var beauty2 = new Beauty(82, 54, 86);
            sw.Stop();
            Console.WriteLine($&quot;生产第二名美人耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty2.SetName(&quot;春香&quot;);
            beauty2.SetTalent(&quot;画画&quot;);

            sw.Restart();
            var beauty3 = new Beauty(82, 54, 86);
            sw.Stop();
            Console.WriteLine($&quot;生产第三名美人耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty3.SetName(&quot;夏香&quot;);
            beauty3.SetTalent(&quot;舞蹈&quot;);

            Show(beauty1);
            Show(beauty2);
            Show(beauty3);

            Console.WriteLine(&quot;\nHappy Ending~&quot;);
            Console.ReadLine();
        }

        public static void Show(Beauty beauty)
        {
            Console.WriteLine($&quot;我是 {beauty.Name},身材[{beauty.Bust}-{beauty.TheWaist}-{beauty.Hipline}],我的才艺是 {beauty.Talent}&quot;);
        }
    }
</code></pre>
<p>结果展示：</p>
<pre><code>生产第一名美女耗时：3008/ms

生产第二名美女耗时：3001/ms

生产第三名美女耗时：3000/ms

我是 秋香,身材[82-54-86],我的才艺是 弹琴
我是 春香,身材[82-54-86],我的才艺是 画画
我是 夏香,身材[82-54-86],我的才艺是 舞蹈
</code></pre>
<p>我的美人产生了，但就是每次都是通过New创建，设置的标准身材（82-54-86）不变但每次都要设置，而且每次耗时都很长，要是再生产更多，岂不劳累又耗时...</p>
<p>正在苦恼之时，突然灵感乍现，可以使用<strong>原型模式</strong>(Prototype)解决呀</p>
<h4 id="code-upgrade">Code Upgrade</h4>
<blockquote>
<p><strong>原型模式</strong> 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</p>
<p>其实就是从一个对象再创建另一个可定制的对象，而且不需要知道任何创建的细节</p>
<p><strong>.NET</strong>在<strong>System</strong>命名空间中提供了<strong>ICloneable</strong>接口，其中只有一个方法<strong>Clone()</strong>,实现这个接口就可以完成原型模式了。</p>
</blockquote>
<p>开始改造：</p>
<blockquote>
<p><strong>Beauty</strong>实现<strong>ICloneable</strong>接口</p>
<pre><code>    public class Beauty : ICloneable
    {
        public Beauty(int bust, int theWaist, int hipline)
        {
            Bust = bust;
            TheWaist = theWaist;
            Hipline = hipline;
            //模拟产生一名美人的时长
            Thread.Sleep(3000);
        }

        /// &lt;summary&gt;
        /// 名称
        /// &lt;/summary&gt;
        public string Name { get; set; }

        /// &lt;summary&gt;
        /// 才艺
        /// &lt;/summary&gt;
        public string Talent { get; set; }

        /// &lt;summary&gt;
        /// 胸围
        /// &lt;/summary&gt;
        public int Bust { get; set; }

        /// &lt;summary&gt;
        /// 腰围
        /// &lt;/summary&gt;
        public int TheWaist { get; set; }

        /// &lt;summary&gt;
        /// 臀围
        /// &lt;/summary&gt;
        public int Hipline { get; set; }

        /// &lt;summary&gt;
        /// 起名
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;name&quot;&gt;&lt;/param&gt;
        public void SetName(string name)
        {
            Name = name;
        }

        /// &lt;summary&gt;
        /// 设置才艺
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;talent&quot;&gt;&lt;/param&gt;
        public void SetTalent(string talent)
        {
            Talent = talent;
        }

        public object Clone()
        {
            return this.MemberwiseClone();
        }
    }
</code></pre>
</blockquote>
<p>客户端生产时，除第一个调用<strong>new()</strong>外，其他使用<strong>Clone()</strong>方法创建</p>
<pre><code>    internal class Program
    {
        private static void Main(string[] args)
        {
            var sw = new Stopwatch();
            sw.Start();
            var beauty1 = new Beauty(82, 54, 86);
            sw.Stop();
            Console.WriteLine($&quot;生产第一名美女耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty1.SetName(&quot;秋香&quot;);
            beauty1.SetTalent(&quot;弹琴&quot;);

            sw.Restart();
            var beauty2 = (Beauty)beauty1.Clone();
            sw.Stop();
            Console.WriteLine($&quot;生产第二名美女耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty2.SetName(&quot;春香&quot;);
            beauty2.SetTalent(&quot;画画&quot;);

            sw.Restart();
            var beauty3 = (Beauty)beauty1.Clone();
            sw.Stop();
            Console.WriteLine($&quot;生产第三名美女耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty3.SetName(&quot;夏香&quot;);
            beauty3.SetTalent(&quot;舞蹈&quot;);

            Show(beauty1);
            Show(beauty2);
            Show(beauty3);

            Console.WriteLine(&quot;\nHappy Ending~&quot;);
            Console.ReadLine();
        }

        public static void Show(Beauty beauty)
        {
            Console.WriteLine($&quot;我是 {beauty.Name},身材[{beauty.Bust}-{beauty.TheWaist}-{beauty.Hipline}],我的才艺是 {beauty.Talent}&quot;);
        }
    }
</code></pre>
<p>结果展示：</p>
<pre><code>生产第一名美女耗时：3009/ms

生产第二名美女耗时：0/ms

生产第三名美女耗时：0/ms

我是 秋香,身材[82-54-86],我的才艺是 弹琴
我是 春香,身材[82-54-86],我的才艺是 画画
我是 夏香,身材[82-54-86],我的才艺是 舞蹈
</code></pre>
<p>我们可以看到，除了第一个创建耗时以外，其他Clone出来的对象基本不耗时，而且不用重复设置固定属性（三围）<em><strong>（一般在初始化的信息不发生变化的情况下，克隆是最好的方法，既隐藏了对象创建的细节，又对性能大大的提高）</strong></em>，我心甚欢...</p>
<p>于是想着对美人的才艺进行升级</p>
<blockquote>
<p><strong>Talent</strong>类，对才艺描述，增加才艺段位</p>
<pre><code>    public class Talent
    {
        /// &lt;summary&gt;
        /// 才艺名
        /// &lt;/summary&gt;
        public string Name { get; set; }

        /// &lt;summary&gt;
        /// 段位
        /// &lt;/summary&gt;
        public int Level { get; set; }
    
</code></pre>
</blockquote>
<blockquote>
<p><strong>Beauty</strong>类改造</p>
<pre><code>    public class Beauty : ICloneable
    {
        public Beauty(int bust, int theWaist, int hipline)
        {
            Bust = bust;
            TheWaist = theWaist;
            Hipline = hipline;
            Talent = new Talent();
            //模拟产生一名美人的时长
            Thread.Sleep(3000);
        }

        /// &lt;summary&gt;
        /// 名称
        /// &lt;/summary&gt;
        public string Name { get; set; }

        /// &lt;summary&gt;
        /// 才艺
        /// &lt;/summary&gt;
        public Talent Talent { get; set; }

        /// &lt;summary&gt;
        /// 胸围
        /// &lt;/summary&gt;
        public int Bust { get; set; }

        /// &lt;summary&gt;
        /// 腰围
        /// &lt;/summary&gt;
        public int TheWaist { get; set; }

        /// &lt;summary&gt;
        /// 臀围
        /// &lt;/summary&gt;
        public int Hipline { get; set; }

        /// &lt;summary&gt;
        /// 起名
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;name&quot;&gt;&lt;/param&gt;
        public void SetName(string name)
        {
            Name = name;
        }

        /// &lt;summary&gt;
        /// 设置才艺
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;talent&quot;&gt;&lt;/param&gt;
        public void SetTalent(string name, int level)
        {
            Talent.Name = name;
            Talent.Level = level;
        }

        public object Clone()
        {
            return this.MemberwiseClone();
        }
    }
</code></pre>
</blockquote>
<p>客户端设置才艺段位：</p>
<pre><code>    internal class Program
    {
        private static void Main(string[] args)
        {
            var sw = new Stopwatch();
            sw.Start();
            var beauty1 = new Beauty(82, 54, 86);
            sw.Stop();
            Console.WriteLine($&quot;生产第一名美女耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty1.SetName(&quot;秋香&quot;);
            beauty1.SetTalent(&quot;弹琴&quot;, 10);

            sw.Restart();
            var beauty2 = (Beauty)beauty1.Clone();
            sw.Stop();
            Console.WriteLine($&quot;生产第二名美女耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty2.SetName(&quot;春香&quot;);
            beauty2.SetTalent(&quot;画画&quot;, 9);

            sw.Restart();
            var beauty3 = (Beauty)beauty1.Clone();
            sw.Stop();
            Console.WriteLine($&quot;生产第三名美女耗时：{sw.ElapsedMilliseconds}/ms\n&quot;);
            beauty3.SetName(&quot;夏香&quot;);
            beauty3.SetTalent(&quot;舞蹈&quot;, 8);

            Show(beauty1);
            Show(beauty2);
            Show(beauty3);

            Console.WriteLine(&quot;\nHappy Ending~&quot;);
            Console.ReadLine();
        }

        public static void Show(Beauty beauty)
        {
            Console.WriteLine($&quot;我是 {beauty.Name},身材[{beauty.Bust}-{beauty.TheWaist}-{beauty.Hipline}],我的才艺是 {beauty.Talent.Name} 段位 {beauty.Talent.Level}&quot;);
        }
    }
</code></pre>
<p>结果展示:</p>
<pre><code>生产第一名美女耗时：3022/ms

生产第二名美女耗时：0/ms

生产第三名美女耗时：0/ms

我是 秋香,身材[82-54-86],我的才艺是 舞蹈 段位 8
我是 春香,身材[82-54-86],我的才艺是 舞蹈 段位 8
我是 夏香,身材[82-54-86],我的才艺是 舞蹈 段位 8
</code></pre>
<p>看到结果我懵了，什么情况，我明明把才艺设置的不一样，怎么三个最后都是 [舞蹈 段位 8] ？？？</p>
<p>良久平息之后，才明白导致上面结果的原因，也将是本文的重点：<strong>浅复制与深复制</strong></p>
<h4 id="浅复制与深复制">浅复制与深复制</h4>
<blockquote>
<p><strong>浅复制</strong>：复制得到的对象的所有变量都包含有与原来的对象相同的值，而所有的对其他对象的引用都仍然指向原来的对象。</p>
<p><strong>MemberwiseClone()</strong>方法就是浅复制，如果字段是值类型的，则对该字段执行逐位复制，如果字段是引用类型，则复制引用但不复制引用对象，因此原始对象及其复本引用同一对象。</p>
</blockquote>
<p>这就是上面，三个美人的才艺最后都变成一样的原因，才艺<strong>Talent</strong>是一个引用类型，复制三份的是<strong>Talent</strong>的引用，都指向同一个<strong>Talent</strong>对象</p>
<blockquote>
<p><strong>深复制</strong>：把引用对象的变量指向复制过的新对象，而不是原有的被引用的对象。</p>
</blockquote>
<p>解决上面的问题，我们就要用深复制，要对<strong>Talent</strong>复制一个新对象，而不是一个引用。（'美人'引用了'才艺'，假如'才艺'里还有 引用，很多层，就涉及到深复制要深入多少层的问题，需要事先考虑好，而且要当心出现循环引用的问题，本次案例我们就深入到第一层就可以了）</p>
<p>上代码：</p>
<blockquote>
<p><strong>Talent</strong>类，实现ICloneable接口</p>
<pre><code>    public class Talent : ICloneable
    {
        /// &lt;summary&gt;
        /// 才艺名
        /// &lt;/summary&gt;
        public string Name { get; set; }

        /// &lt;summary&gt;
        /// 段位
        /// &lt;/summary&gt;
        public int Level { get; set; }

        public object Clone()
        {
            return this.MemberwiseClone();
        }
    }
</code></pre>
</blockquote>
<blockquote>
<p><strong>Beauty</strong>类，增加私有构造函数，以便克隆“才艺”的克隆数据</p>
<pre><code>    public class Beauty : ICloneable
    {
        public Beauty(int bust, int theWaist, int hipline)
        {
            Bust = bust;
            TheWaist = theWaist;
            Hipline = hipline;
            Talent = new Talent();
            //模拟产生一名美人的时长
            Thread.Sleep(3000);
        }

        private Beauty(Talent talent)
        {
            this.Talent = (Talent)talent.Clone();
        }

        /// &lt;summary&gt;
        /// 名称
        /// &lt;/summary&gt;
        public string Name { get; set; }

        /// &lt;summary&gt;
        /// 才艺
        /// &lt;/summary&gt;
        public Talent Talent { get; set; }

        /// &lt;summary&gt;
        /// 胸围
        /// &lt;/summary&gt;
        public int Bust { get; set; }

        /// &lt;summary&gt;
        /// 腰围
        /// &lt;/summary&gt;
        public int TheWaist { get; set; }

        /// &lt;summary&gt;
        /// 臀围
        /// &lt;/summary&gt;
        public int Hipline { get; set; }

        /// &lt;summary&gt;
        /// 起名
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;name&quot;&gt;&lt;/param&gt;
        public void SetName(string name)
        {
            Name = name;
        }

        /// &lt;summary&gt;
        /// 设置才艺
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;talent&quot;&gt;&lt;/param&gt;
        public void SetTalent(string name, int level)
        {
            Talent.Name = name;
            Talent.Level = level;
        }

        public object Clone()
        {
            //调用私有构造方法，让“才艺”克隆完成，然后再给这个 “美人” 对象的相关字段赋值，
            //最终返回一个深复制的 “美人” 对象
            var beauty = new Beauty(Talent)
            {
                Bust = this.Bust,
                TheWaist = this.TheWaist,
                Hipline = this.Hipline
            };
            return beauty;
        }
    }
</code></pre>
</blockquote>
<p>客户端通以前一样，展示结果：</p>
<pre><code>生产第一名美女耗时：3008/ms

生产第二名美女耗时：0/ms

生产第三名美女耗时：0/ms

我是 秋香,身材[82-54-86],我的才艺是 弹琴 段位 10
我是 春香,身材[82-54-86],我的才艺是 画画 段位 9
我是 夏香,身材[82-54-86],我的才艺是 舞蹈 段位 8
</code></pre>
<p>看到结果，我心甚喜。突然屋内彩虹环绕，三位美人出现在我面前，婀娜妖娆，不对，怎么少了我的冬香，爬向键盘...</p>
<p>叮铃铃，叮铃铃...闹铃响了</p>
<p>握艹，我要续梦~</p>
<p>源码地址： <a href="https://gitee.com/sayook/DesignMode/tree/master/Prototype">https://gitee.com/sayook/DesignMode/tree/master/Prototype</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 11:01</span>&nbsp;
<a href="https://www.cnblogs.com/sayook/">稻草堆上打着滚儿</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12766018" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12766018);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 383968, cb_blogApp = 'sayook', cb_blogUserGuid = '7481381b-e464-e611-9fc1-ac853d9f53cc';
    var cb_entryId = 12766018, cb_entryCreatedDate = '2020-04-24 11:01', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 稻草堆上打着滚儿
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>