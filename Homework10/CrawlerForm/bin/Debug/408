<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="发现网上很少有讲解关于.NET Core的单元测试文章，代码覆盖率的文章就更少了，所以就抽时间梳理了一篇。通过本篇文章您将Get：1： 为.NET Core应用添加单元测试 2： 为.NET Core" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>【5min+】为你的.NET应用进行一次全方位体检 - 句幽 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/uoyo/custom.css?v=TZbXpieXQG/10X3L0iBgILcLZKA=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=-Yh290MhQyDeXLmvKTSses9H6-49lqbpXFh55zvS0w8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/uoyo/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/uoyo/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/uoyo/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 401017;
        var currentBlogApp = 'uoyo';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'Custom';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/uoyo/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/uoyo/">句幽</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/uoyo/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%8F%A5%E5%B9%BD">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/uoyo/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
27&nbsp; </span>
<span id="stats_article_count">文章 - 
1&nbsp; </span>
<span id="stats-comment_count">评论 - 
406</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/uoyo/p/12767960.html">【5min+】为你的.NET应用进行一次全方位体检</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        发现网上很少有讲解关于.NET Core的单元测试文章，代码覆盖率的文章就更少了，所以就抽时间梳理了一篇。通过本篇文章您将Get：1： 为.NET Core应用添加单元测试 2： 为.NET Core应用进行代码覆盖率度量 3：使用Azure Devops进行自动化构建 4：收获类似于下面的这些徽章：
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h2 id="系列介绍"><strong>系列介绍</strong></h2>
<p>【五分钟的dotnet】是一个利用您的碎片化时间来学习和丰富.net知识的博文系列。它所包含了.net体系中可能会涉及到的方方面面，比如C#的小细节，AspnetCore，微服务中的.net知识等等。</p>
<p>通过本篇文章您将Get：</p>
<ul>
<li>为<code>.NET Core</code>应用添加单元测试</li>
<li>为<code>.NET Core</code>应用进行代码覆盖率度量</li>
<li>使用<code>Azure Devops</code>进行自动化构建</li>
<li>收获类似于下面的这些徽章：<br>
<img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424025509QQ%E6%88%AA%E5%9B%BE20200424105415.png" alt="x"></li>
</ul>
<p>时长为大约有十分钟，内容丰富，建议先投币再上车观看😜</p>
<h2 id="正文"><strong>正文</strong></h2>
<p>发现网上很少有讲解关于<code>.NET Core</code>的<code>单元测试</code>文章，<code>代码覆盖率</code>的文章就更少了。所以就抽时间梳理了一篇😁。</p>
<h3 id="单元测试">单元测试</h3>
<p>先来说一下<code>单元测试</code>，对于已经开始使用单元测试的小伙伴可以直接跳过这个小节。</p>
<p>那么咱们为什么需要进行单元测试呢？肯定是为了减少错误和bug的发生呀，这个不用说大家都知道。网上也有很多介绍<code>单元测试</code>的文章，但是大多都是从一个很简单的方法入手，比如下面这个方法：</p>
<pre><code class="language-csharp">public int SimpleMehtod(int a1, int a2)
{
    return a1 + a2;
}
</code></pre>
<p>然后告诉大家我们需要对这个方法进行验证。 其实这种教程由潜入深，好是好，但是很多没有涉及过单元测试的小伙伴就会感到很懵逼：“这个代码这么简单，我为啥要单元测试？一眼就看出返回两个值的和”，这样反而不能更好的体现单元测试所带来的直观好处。</p>
<p>所以，咱们反过来，思考有下面的一个方法：</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// 获取某个类型的泛型参数
/// &lt;/summary&gt;
/// &lt;param name=&quot;type&quot;&gt;需要检测的类型&lt;/param&gt;
/// &lt;param name=&quot;genericType&quot;&gt;检测类型所继承的泛型接口&lt;/param&gt;
/// &lt;returns&gt;泛型接口的所有参数信息&lt;/returns&gt;
public Type[] MyDemoMethod(Type type, Type genericType)
{
    return type.GetInterfaces()
                .Where(i =&gt; IsGenericType(i))
                .SelectMany(i =&gt; i.GetGenericArguments())
                .ToArray();

    bool IsGenericType(Type type1)
        =&gt; type1.IsGenericType &amp;&amp; type1.GetGenericTypeDefinition() == genericType;
}
</code></pre>
<p>相对而言该方法就显得复杂一些，它的功能是返回一个类型所继承的泛型接口的所有参数。</p>
<p>假设我们在一次功能迭代中，编写了这样一个<code>MyDemoMethod</code>的方法，该方法很明显是作为一个工具方法来被其它调用者使用。那么，当我们刚刚编写完这个方法的时候，我们就很想知道这个方法是不是能够正确的执行怎么办呢？“编写一个控制台程序来测试？”、“等最后功能全部写完了再来看”、“不管了”。</p>
<p>在咱们没有使用单元测试的时候，上面的几个操作是常见的情况，可能很多小伙伴会基于控制台来测试；还有一些小伙伴直接F5运行应用来进行测试，这样直接运行程序会花费我们大量的琐碎时间（比如登录，操作功能，进入模块，测试该功能…………）；最后是那些“等最后功能全部写完了再来看”的朋友，如果记性还不错的话，最后还可以记得来要对这个功能测试，要是后期编写了很多其它业务功能的话，可能早都忘记有这个方法了，所以最后就是完全“裸奔”。</p>
<p>所以，此时就需要咱们引入“单元测试”了。当一个方法被多个地方使用，过早的对该方法进行<code>单元测试</code>，将会大幅度的减少bug的产生。</p>
<p>在<code>.NET Core</code>中使用单元测试也很简单，直接新建一个测试项目就可以了。本次文章选择的是基于<code>Xunit</code>所建立的测试项目，然后在测试项目中引用需要测试的项目：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424031643QQ%E6%88%AA%E5%9B%BE20200424111628.png" alt="x"></p>
<h4 id="编写测试用例">编写测试用例</h4>
<p>接下来您需要对您需要测试的类编写对应的测试用例。假如我们编写了如下的方法(<em>别问我为什么不是上面的那个泛型基础方法，因为待会要测代码覆盖率，为了简单</em>)：</p>
<pre><code class="language-csharp">public int CalDemo(int s, bool checkSign = true)
{
    if (s &gt; 10 &amp;&amp; checkSign)
    {
        return s &lt;&lt; 2;
    }
    else
    {
        return s;
    }
}
</code></pre>
<p>在实际项目中，我们可能有许许多多像这样的方法。具有几个分支，每个分支执行不同的代码。针对该<code>CalDemo</code>方法，很明显当传入参数<code>s</code>大于10和小于10的时候有着不同的执行逻辑（先忽略<code>checkSign</code>参数），所以我们可以分别测试当s大于10或者s小于等于10的情况：</p>
<p>在<code>xunit</code>测试项目中编写以下用例：</p>
<pre><code class="language-csharp">[Fact]
public void CalDemo_ArguementMoreThan10()
{
    var testValue = 11;

    DemoClass demoClass = new DemoClass();
    var result =  demoClass.CalDemo(testValue);

    //判断结果是否等于 44。 如果是则测试通过
    Assert.Equal(44, result);
}

[Fact]
public void CalDemo_ArguementLessThan10()
{
    var testValue = 9;

    DemoClass demoClass = new DemoClass();
    var result = demoClass.CalDemo(testValue);

    //判断结果是否等于 9。 如果是则测试通过
    Assert.Equal(9, result);
}
</code></pre>
<p>这样我们就完成了对该方法的测试，当然您还可以编写：“传入参数等于10”，“传入参数为空”，“传入参数为负数”等等用例。</p>
<p>在<code>VS</code>中打开&quot;测试资源管理器&quot;来运行测试看看吧：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424032746QQ%E6%88%AA%E5%9B%BE20200424112735.png" alt="x"></p>
<p>有关<code>xunit</code>的使用，您可以参考：<a href="https://xunit.net/docs/getting-started/netcore/cmdline">Getting Started with xUnit.net</a></p>
<h3 id="代码覆盖率">代码覆盖率</h3>
<p>通过“测试资源管理器”，我们可以看到单元测试的正确与否。但是，我如何知道该单元的代码是否都测试完成了呢？如果没有完成我还需要编写哪些测试用例呢？</p>
<p>这个时候，我们就需要对测试进行度量，度量哪些代码已经被我们测试过，哪些代码没有被测试到。针对没有测试到的部分，我们再编写一些Case进行测试。</p>
<p>所以我们可以引入<code>代码覆盖率</code>的概念来进行评估。关于该概念的内容我这里就不在过多阐述了，大家有兴趣可以“百度谷歌必应”三条龙服务。</p>
<p>在<code>VS</code>中，为我们提供了代码覆盖率的菜单项：在“测试” 菜单中，选择“分析所有测试的代码覆盖率” 。</p>
<p><img src="https://docs.microsoft.com/zh-cn/visualstudio/test/media/vs-2019/analyze-code-coverage.png?view=vs-2019" alt="x"></p>
<p>通过该功能我们就可以对已有的单元测试进行代码覆盖率度量。</p>
<p><img src="https://docs.microsoft.com/zh-cn/visualstudio/test/media/vs-2019/codecoverage1.png?view=vs-2019" alt="x"></p>
<p>是不是很简单？ 但是你会发现：“<strong>你根本找不到这个按钮！！！！！！</strong>”。</p>
<p>别找了，您的<code>Visual Studio 2019</code>没得这个菜单？   为什么呢？  因为您没有<code>充钱啊！！！</code>，该功能只针对<code>Visual Studio Enterprise</code>（企业版）提供。使用<code>社区版</code>的我，眼泪流下来。</p>
<p>你以为这样就能难倒我了吗？  直接上开源的度量工具：<a href="https://github.com/tonerdo/coverlet">coverlet</a>。来看看关于Coverlet的介绍：“Coverlet是一个跨平台的.NET代码覆盖框架，支持行、分支和方法覆盖。它与Windows上的.NET Framework和所有受支持的平台上的.NET Core一起工作。”</p>
<p>这里我强烈推荐大家使用Coverlet来进行代码覆盖率测试，为什么呢？因为它跨平台呀。后面我们会使用Linux环境来进行自动化构建，所以Coverlet具有明显的优势，在<code>Azure</code>的官方文档中也推荐大家使用Coverlet：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424034519QQ%E6%88%AA%E5%9B%BE20200424114508.png" alt="x"></p>
<h4 id="使用coverlet">使用Coverlet</h4>
<p>使用<code>Coverlet</code>也很简单，直接在您的测试项目安装对应的<code>Nuget</code>包依赖就可以了：</p>
<pre><code class="language-powershell">dotnet add package coverlet.collector
</code></pre>
<p>因为跨平台的特性，所以您可能已经想到了，咱们接下来就没有像“测试资源管理器”那样的界面可以一键点击了，所以我们得使用命令行的方式来进行操作，对于一些小伙伴可能需要习惯习惯。</p>
<p>在<code>xunit</code>项目中执行以下命令:</p>
<pre><code class="language-powershell">dotnet test --collect:&quot;XPlat Code Coverage&quot;
</code></pre>
<p>我个人比较喜欢用<code>powershell</code>来执行，当然您可以在vs中用程序包管理控制台来选中项目执行：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424035056QQ%E6%88%AA%E5%9B%BE20200424115035.png" alt="x"></p>
<p>执行后您会发现在项目中多了一个叫做<code>TestResults</code>的文件夹，该文件夹就是本次代码度量的结果：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424035357QQ%E6%88%AA%E5%9B%BE20200424115345.png" alt="x"></p>
<h4 id="度量报告">度量报告</h4>
<p>但是您马上又会发现一个问题，这个报告它喵的是xml格式，看起来十分费解。</p>
<p>所以，我们又引入了另外一个神器：<code>ReportGenerator</code>。关于该工具的描述可以参考：<a href="https://github.com/danielpalme/ReportGenerator">ReportGenerator</a>。 它的作用就像它的名字一样，就是为了生成代码覆盖的报告。</p>
<p>ReportGenerator提供了几种使用方式，一种是您通过<code>Nuget</code>包来使用它，还有就是把他作为一个全局的命令行指令工具来安装它。 这里我们选择了第二种，为了以后使用，所以选全局的来的爽。</p>
<p>在<code>powershell</code>中执行下面命令:</p>
<pre><code class="language-powershell">dotnet tool install --global dotnet-reportgenerator-globaltool
</code></pre>
<p>然后就可以使用它来生成报告了，还是用<code>powershell</code>在<code>xunit</code>测试项目中执行下面的代码：</p>
<pre><code class="language-powershell">reportgenerator &quot;-reports:**\coverage.cobertura.xml&quot; &quot;-targetdir:coveragereport&quot;
</code></pre>
<p>这句话的意思是：根据将<code>xunit</code>项目下的<code>coverage.cobertura.xml</code>文件来生成报告，输出目录为<code>coveragereport</code>。</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424060906QQ%E6%88%AA%E5%9B%BE20200424140838.png" alt="x"></p>
<p>执行之后，在目录中就会出现一个名为<code>coveragereport</code>的文件夹，打开以后点击里面的Index文件打开网页。</p>
<p>哇，效果舒服多了：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424061314QQ%E6%88%AA%E5%9B%BE20200424141226.png" alt="x"></p>
<p>这里您会看到有两个度量指标：一个叫做<code>Line coverage</code>（语句覆盖），另一个叫做<code>Branch coverage</code>（分支覆盖率）。然后您可以点击咱们的源代码文件进入，看看为什么会有这样的结果：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424061322QQ%E6%88%AA%E5%9B%BE20200424141302.png" alt="x"></p>
<p>红色的部分就是咱们已经覆盖的语句，直观的就能看到我们测试了哪些代码。而左侧箭头所标记的地方就是具有分支的地方，这个<code>s &gt; 10 &amp;&amp; checkSing</code>就是一个明显的分支。</p>
<p>通过这种方式我们就能够清楚并且直观的知道我们的代码哪些完成了测试，哪些地方有遗漏等。</p>
<p>单元测试 + 代码覆盖率 的方式能够大幅度的减少我们开发中隐藏的bug，特别是作为个人开发者来说，因为没有专门的测试人员，所以需要自己检测自己的代码，纯靠肉眼来观察的话是很粗糙的，毕竟自己写的代码自己最难发现bug。因此假如时间允许，我们应该尽可能的引入<code>单元测试</code>和<code>代码覆盖率</code>。</p>
<p>一般来说，编写单元测试会扩大代码量至3倍以上，所以这也是很多公司或者开发者选择放弃使用<code>单元测试</code>的原因。但是“出来混迟早是要还的”，假如是一个长期运行的项目，越早发现bug是越关键的一件事，这将关系到项目后期能否稳定运行下去。</p>
<p><strong>注意！！！</strong>，哪怕代码覆盖率达到了100%，也不是证明项目就不会出现bug了。单元测试的全覆盖只能证明您的单元没有问题，需求理解错误或者功能集成时所导致的bug是不会在该阶段被发现的，因此我们还是需要进行其它的测试，比如集成测试，自动化接口测试等。</p>
<h3 id="azure-devops">Azure Devops</h3>
<p>既然有了这么好的<code>单元测试</code>和<code>代码覆盖率</code>，那我肯定希望每次提交代码的时候就能够为这次的代码进行一次测试和反馈。所以咱们可以使用微软这些年吹爆了的<code>Azure</code>平台，人人上云，云上两开花。</p>
<p>接下来，将展示如何利用<code>Azure Devops</code>进行自动化构建。在这之前，咱们先来看看微软为我们开发者带来的一些福利：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424063337QQ%E6%88%AA%E5%9B%BE20200424143322.png" alt="x"><br>
<img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424063857QQ%E6%88%AA%E5%9B%BE20200424143835.png" alt="x"></p>
<p>关于自动化构建，您也可以选用<code>Github Action</code>。大家都知道，自从<code>Github</code>被纳入到微软旗下之后，势头也是越发的猛，现在<code>Github teams</code>都直接免费了。再来看看<code>Azure Devops</code>这边，假如是开源项目，直接免费使用，就算是私有，每个都有30个小时的使用时间。这两兄弟双管齐下，尔等小菜只能说一句“微软巨硬牛B”。</p>
<p>每一次自动化构建的Job背后都是使用云服务器的资源来进行构建，微软直接在Github和Azure这边提供了免费的资源来供您构建，配置好像还是一台2核4G的主机。用老罗的话来说，真的是“不赚钱，就交个朋友”。</p>
<p>所以要使用<code>Azure Devops</code>的话，请先注册您的微软账号。下面的演示我将代码托管在Github上，权限为公开，然后从<code>Azure Devops</code>这边链接Github的库进行构建。</p>
<p>从<code>Pipelines</code>中新建一个Pipelines：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424064720QQ%E5%9B%BE%E7%89%8720200424144711.png" alt="Pipelines"></p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424064951QQ%E6%88%AA%E5%9B%BE20200424144916.png" alt="x"></p>
<p>我这里选择的是<code>Github</code>的代码库，然后下一步进行选择，选择项会有几个模板供您选择，您可以随意选择一个<code>AspNet Core</code>的模板，然后进行下一步进行配置。在下面的图片中，表示了一个对<code>.NET Core</code>程序进行“自动生成-&gt;测试-&gt;生成代码覆盖率”的job，您可以根据您的自身情况进行参考和更改：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424070951QQ%E6%88%AA%E5%9B%BE20200424150710.png" alt="x"><br>
<img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424071001QQ%E6%88%AA%E5%9B%BE20200424150940.png" alt="x"></p>
<p>然后提交该配置。当<code>master</code>分支的代码进行变动的时候，job就会自动执行，执行的结果可以在<code>Pipelines</code>看到：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424071244QQ%E6%88%AA%E5%9B%BE20200424151214.png" alt="x"></p>
<p>再来看看咱们的代码度量结果：<br>
<img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424071251QQ%E6%88%AA%E5%9B%BE20200424151238.png" alt="x"></p>
<p>完美。</p>
<h3 id="徽章收集">徽章收集</h3>
<p>不知道有没有人像一样，很喜欢点QQ图标之类的东西。（<em>所以我在博客园添加了两个徽章</em>😂）</p>
<p>当然，使用徽章的话可以让用户一下就了解到项目的情况，比如版本号，下载数量，开源协议等等。</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424025509QQ%E6%88%AA%E5%9B%BE20200424105415.png" alt="x"></p>
<p><code>Azure Piplines</code>提供了一个徽章，您可以从job的右上角获取到：</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424071750QQ%E6%88%AA%E5%9B%BE20200424151739.png" alt="x"></p>
<p>该徽章是关于job的构建成功的信息。但是如果您想获取到其它的信息，可以使用<a href="https://shields.io/category/downloads">shields</a>来进行获取：</p>
<p>打开shields的官网：“<a href="https://shields.io/category/downloads%E2%80%9D%E3%80%82">https://shields.io/category/downloads”。</a> 选择您所需要添加的徽章类别，这里咱们选择了<code>Azure Coverage</code>:</p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1672114/o_200424072122QQ%E6%88%AA%E5%9B%BE20200424152037.png" alt=""></p>
<p>进行输入对应信息后，就可以获取到刚才咱们job中所得到的代码覆盖率的结果了。</p>
<p>然后…………选则一些您需要展示的信息，很快就累计了一排勋章了😂。</p>
<h2 id="最后">最后</h2>
<p>说几个大家可能在单元测试过程中可能涉及到的几个小点：</p>
<ol>
<li>有时候您会测试一个<code>internal</code>级别的类，但是当测试项目引用之后是没有办法找到该类的，您可以通过将程序集标记为对测试项目可见来进行测试：</li>
</ol>
<pre><code class="language-csharp">[assembly: InternalsVisibleTo(&quot;MyDemo.Tests&quot;)]
namespace DuDuDu.MyDemo.Internals
{
    internal class DefaultDemoClass 
    {
    }
}
</code></pre>
<p>2.如果有依赖注入怎么办？ 比如咱们测试AspNetCore的应用时，会有很多类其实是被注入到了DI容器中，但是测试的类又依赖了这些类。</p>
<p>可以使用<code>ServiceCollection</code>来作为测试的容器实现，然后把涉及的服务都添加进去：</p>
<pre><code class="language-csharp">[Fact]
public void Test()
{
    IServiceCollection Services = new ServiceCollection();
    Services.AddTransient&lt;xx,xx&gt;();
    Services.AddTransient&lt;xx,xx&gt;();
    Services.AddTransient&lt;xx,xx&gt;();

    var provider = Services.BuildServiceProvider();
    var testClass = provider.GetService&lt;xx&gt;();

    testClass.TestMethod();
}
</code></pre>
<p>如果有依赖的类还没有实现的时候，可以通过Mock的方法来模拟一个接口完成操作。</p>
<p>3.如果项目多了的话，怎么执行测试和代码度量呢？</p>
<p>我现在选用的是使用<code>Powershell</code>脚本来编写脚本完成的。开发的时候利用VS的“测试资源管理器”来进行单元测试，当单元测试验证的差不多的时候，使用“Powershell”脚本来进行代码覆盖率进行测试，查看忽略的代码然后继续测试。测试通过之后再提交代码到<code>Github</code>，然后<code>Azure Devops</code>进行构建。</p>
<p>好啦，今天的内容有些多，但是对您开发<code>.NET Core</code>项目来说的话，是实实在在的有用。</p>
<p>预告一下，下一期会为大家带来“对AspNet Core返回结果进行自动包装”的文章😄。</p>
<p><em>最后，偷偷说一句：创作不易，点个推荐吧.....</em></p>
<p><img src="https://images.cnblogs.com/cnblogs_com/uoyo/1635918/o_200221093942dw-23.png" alt="x"></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 15:52</span>&nbsp;
<a href="https://www.cnblogs.com/uoyo/">句幽</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12767960" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12767960);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 401017, cb_blogApp = 'uoyo', cb_blogUserGuid = '4660842a-34b1-4866-476c-08d52fc34315';
    var cb_entryId = 12767960, cb_entryCreatedDate = '2020-04-24 15:52', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 句幽
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <div class="Snow">
    <canvas id="Snow"></canvas>
</div>

<!--下雪特效-->
<script src="https://blog-static.cnblogs.com/files/uoyo/snoweffects.js"></script>

<script type="text/javascript" language="javascript"> 
//为右下角推荐推荐区域添加关注按钮
window.onload = function () {
    $('#div_digg').prepend('<div style="padding-bottom: 5px" id="please_follow"><span class="icon_favorite" style="padding-top: 2px"></span><a onclick="follow(\'4660842a-34b1-4866-476c-08d52fc34315\');" href="javascript:void(0);" style="font-weight: bold; padding-left:5px;font-size: 14px; vertical-align: super;color: #ff5d47;">关注一下楼主吧</a> </div>');
}
</script>

<!--代码复制-->
<script src="https://cdn.bootcss.com/clipboard.js/2.0.4/clipboard.min.js"></script>

<!--主题-->
<script src="https://blog-static.cnblogs.com/files/uoyo/gshang.2019.10.27.1.js"></script>

<!-- zoom.js 的样式 -->
<link rel="stylesheet" type="text/css" href="https://blog-static.cnblogs.com/files/uoyo/zoom.css">
<!-- Bootstrap 的 transition.js cdn（过渡动画插件）-->
<script src="https://cdn.bootcss.com/bootstrap/3.2.0/js/transition.js"></script>
<!-- zoom.js 核心代码 -->
<script src="https://blog-static.cnblogs.com/files/uoyo/zoom.js"></script>
<script type='text/javascript'>$('#cnblogs_post_body img').attr('data-action', 'zoom');</script>
    </div>
</body>
</html>